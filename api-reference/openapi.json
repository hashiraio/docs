{
  "openapi": "3.0.0",
  "info": {
    "title": "Catalog API",
    "version": "1.0.0"
  },
  "paths": {
    "/v1/auth/otp/send": {
      "post": {
        "summary": "Initiate passwordless auth",
        "description": "Initiates passwordless login using email using OTP code",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendOTPRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendOTPResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendOTPErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendOTPRateLimitResponse"
                }
              }
            }
          }
        },
        "parameters": [],
        "security": [],
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      }
    },
    "/v1/auth/otp/verify": {
      "post": {
        "summary": "Authenticate with OTP code",
        "description": "Authenticates user with email and OTP code for passwordless login",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyOTPRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authentication successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyOTPResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid OTP code",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyOTPErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyOTPRateLimitResponse"
                }
              }
            }
          }
        },
        "parameters": [],
        "security": [],
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      }
    },
    "/v1/auth/sessions": {
      "post": {
        "summary": "Refresh session",
        "description": "Refreshes the user session using a refresh token",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshSessionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Session refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshSessionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyOTPRateLimitResponse"
                }
              }
            }
          }
        },
        "parameters": [],
        "security": [],
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      }
    },
    "/v1/apps/{appId}/users/count": {
      "get": {
        "summary": "Get app user count",
        "description": "Retrieves the current user count and user limit for a specific app",
        "tags": ["Apps"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "App ID",
            "example": "cmcx1p0y50315i80ldhmlcnmm"
          }
        ],
        "responses": {
          "200": {
            "description": "User count retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppUserCountResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "App not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      }
    },
    "/v1/apps/{appId}/secret": {
      "get": {
        "summary": "Get app secrets - Related to app/configuration/settings (basic)",
        "description": "Retrieves app secrets/clients for a specific app. Related to app/configuration/settings (basic)",
        "tags": ["Apps"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "App ID",
            "example": "cmcx1p0y50315i80ldhmlcnmm"
          }
        ],
        "responses": {
          "200": {
            "description": "App secrets retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppSecretsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "App not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      }
    },
    "/v1/apps/{appId}/domains": {
      "get": {
        "summary": "Get app domain configuration - Related to app/configuration/settings (domains)",
        "description": "Retrieves domain configuration for a specific app. Related to app/configuration/settings (domains)",
        "tags": ["Apps"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "App ID",
            "example": "cmcx1p0y50315i80ldhmlcnmm"
          }
        ],
        "responses": {
          "200": {
            "description": "Domain configuration retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppDomainConfiguration"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "App not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      },
      "put": {
        "summary": "Update app domain configuration - Related to app/configuration/settings (domains)",
        "description": "Updates domain configuration for a specific app. Used for enabling/disabling httponly cookies and other domain settings. Related to app/configuration/settings (domains)",
        "tags": ["Apps"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "App ID",
            "example": "cmcx1p0y50315i80ldhmlcnmm"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAppDomainRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Domain configuration updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppDomainConfiguration"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "App not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      }
    },
    "/v1/accounts": {
      "get": {
        "summary": "Get user accounts",
        "description": "Retrieves all accounts associated with the authenticated user",
        "tags": ["Dashboard"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Access denied"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      }
    },
    "/v1/accounts/{accountId}/billing": {
      "get": {
        "summary": "Get account billing information",
        "description": "Retrieves billing information for a specific account",
        "tags": ["Dashboard"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Account ID",
            "example": "cmcvhzuqq03a3jp0ngx86i7ce"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tier": {
                      "type": "string",
                      "example": "free"
                    },
                    "tierName": {
                      "type": "string",
                      "example": "Free"
                    },
                    "monthlyActiveUsers": {
                      "type": "integer",
                      "example": 0
                    },
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "maxMonthlyActiveUsers": {
                      "type": "integer",
                      "example": 1000
                    },
                    "priceCents": {
                      "type": "integer",
                      "example": 0
                    },
                    "nextTier": {
                      "type": "object",
                      "properties": {
                        "tier": {
                          "type": "string",
                          "example": "dev"
                        },
                        "tierName": {
                          "type": "string",
                          "example": "Core"
                        },
                        "priceCents": {
                          "type": "integer",
                          "example": 19900
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Access denied"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Account not found"
                    }
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      }
    },
    "/v1/accounts/admins": {
      "get": {
        "summary": "Get admin information",
        "description": "Retrieves admin information for the authenticated user",
        "tags": ["Dashboard"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "example": "user@example.com"
                    },
                    "can_leave": {
                      "type": "boolean",
                      "example": false
                    },
                    "cannot_leave_reason": {
                      "type": "string",
                      "example": "active_apps"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      }
    },
    "/v1/accounts/{accountId}/apps": {
      "post": {
        "summary": "Create a new app",
        "description": "Creates a new application within the specified account",
        "tags": ["Dashboard"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Account ID",
            "example": "cmcvhzuqq03a3jp0ngx86i7ce"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "App created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountNotFoundResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAppRateLimitResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      }
    },
    "/v1/apps/{appId}": {
      "get": {
        "summary": "Get app details",
        "description": "Retrieves comprehensive details about a specific app",
        "tags": ["Apps"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "App ID",
            "example": "cmcx1p0y50315i80ldhmlcnmm"
          },
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of your Catalog app",
            "example": "cla04x0d00002nyb6oofp5dqh"
          },
          {
            "name": "privy-client",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Privy client identifier for dashboard requests",
            "example": "privy-dashboard:1.0.0"
          }
        ],
        "responses": {
          "200": {
            "description": "App details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "App not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update app configuration - Used across multiple screens: app/configuration/settings (general, domains, client, advanced), app/configuration/branding, app/configuration/terms&privacy, app/authentication (basics)",
        "description": "Comprehensive app configuration endpoint used across multiple dashboard screens. Updates branding (name, logo, theme, accent color), privacy settings (terms & conditions URL, privacy policy URL, terms acceptance), authentication methods (wallet, email, SMS, passkey, etc.), domain restrictions, client settings, and advanced features (Android signing keys, captcha, allowlist, OAuth redirect URLs, embedded wallet config, funding config). Related to app/configuration/settings (general, domains, client, advanced), app/configuration/branding, app/configuration/terms&privacy, app/authentication (basics)",
        "tags": ["Apps"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "App ID",
            "example": "cmcx1p0y50315i80ldhmlcnmm"
          },
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of your Catalog app",
            "example": "cla04x0d00002nyb6oofp5dqh"
          },
          {
            "name": "privy-client",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Privy client identifier for dashboard requests",
            "example": "privy-dashboard:1.0.0"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "App configuration updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "App not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi.com"
          }
        ]
      }
    },
    "/v1/apps/{appId}/clients": {
      "get": {
        "summary": "Get app clients - Related to app/configuration/settings (client)",
        "description": "Retrieves all app clients for a specific app. Related to app/configuration/settings (client)",
        "tags": ["Apps"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "App ID",
            "example": "cmcx1p0y50315i80ldhmlcnmm"
          }
        ],
        "responses": {
          "200": {
            "description": "App clients retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppClientsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "App not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      },
      "post": {
        "summary": "Create app client - Related to app/configuration/settings (client)",
        "description": "Creates a new app client for a specific app. Related to app/configuration/settings (client)",
        "tags": ["Apps"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "App ID",
            "example": "cmcx1p0y50315i80ldhmlcnmm"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAppClientRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "App client created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppClient"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "App not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      }
    },
    "/v1/apps/{appId}/clients/{clientId}": {
      "patch": {
        "summary": "Update app client - Related to app/configuration/settings (client)",
        "description": "Updates a specific app client configuration. Related to app/configuration/settings (client)",
        "tags": ["Apps"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "App ID",
            "example": "cmcx1p0y50315i80ldhmlcnmm"
          },
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Client ID",
            "example": "v6u2vb7fya7hj9g91501xkv8r"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAppClientRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "App client updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppClient"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "App or client not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientNotFoundResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      }
    },
    "/v1/apps/{appId}/url-restriction": {
      "put": {
        "summary": "Update app URL restrictions - Related to app/configuration/settings/advanced (allowed oauth redirect url)",
        "description": "Updates URL restriction settings including OAuth redirect URLs. Related to app/configuration/settings/advanced (allowed oauth redirect url)",
        "tags": ["Apps"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "App ID",
            "example": "cmcx1p0y50315i80ldhmlcnmm"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/URLRestrictionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "URL restrictions updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/URLRestrictionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "App not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi.com"
          }
        ]
      }
    },
    "/v1/wallets/{walletId}": {
      "get": {
        "summary": "Get wallet",
        "description": "Retrieves details of a specific wallet by walletId",
        "tags": ["Wallets"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "walletId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Wallet ID",
            "example": "a884dbf4-8ee5-40ab-97e3-78daa9dfa66c"
          }
        ],
        "responses": {
          "200": {
            "description": "Wallet details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wallet"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Wallet not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Wallet not found"
                    }
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      }
    },
    "/v1/wallets": {
      "post": {
        "summary": "Create wallets",
        "description": "Creates the wallets across all 5 chains (Bitcoin, EVM, Solana, Starknet and Sui) for the provided user under the app",
        "tags": ["Wallets"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWalletRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Wallet created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wallets"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/WalletErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/WalletValidationErrorResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - App or wallet not found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/NotFoundResponse"
                    },
                    {
                      "$ref": "#/components/schemas/WalletErrorResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Wallet creation or loading failed",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/WalletCreationErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/WalletLoadErrorResponse"
                    }
                  ]
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      },
      "get": {
        "summary": "Get all wallets",
        "description": "Retrieves a list of wallets for the app with optional filterin (NOTE: You'd need to give atleast one query param for it to work)",
        "tags": ["Wallets"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter wallets under a brand account",
            "example": "a884dbf4-8ee5-40ab-97e3-78daa9dfa66c"
          },
          {
            "name": "app_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter wallets under an application",
            "example": "a884dbf4-8ee5-40ab-97e3-78daa9dfa66c"
          },
          {
            "name": "owner_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter wallets under a user",
            "example": "a884dbf4-8ee5-40ab-97e3-78daa9dfa66c"
          }
        ],
        "responses": {
          "200": {
            "description": "Wallets retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wallets"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      }
    },
    "/v1/wallets/{walletId}/balance": {
      "get": {
        "summary": "Get wallet balance",
        "description": "Retrieves the current balance of a specific wallet",
        "tags": ["Wallets"],
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "walletId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Wallet ID",
            "example": "a884dbf4-8ee5-40ab-97e3-78daa9dfa66c"
          }
        ],
        "responses": {
          "200": {
            "description": "Wallet balance retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletBalanceResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Wallet not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletNotFoundResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      }
    },
    "/v1/wallets/{walletId}/transactions": {
      "get": {
        "summary": "Get wallet transactions",
        "description": "Retrieves transaction history (Wallet transactions + transaction Contract Calls) for a specific wallet",
        "tags": ["Wallets"],
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "walletId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Wallet ID",
            "example": "d0l66us361cm2p5777kpihjx"
          }
        ],
        "responses": {
          "200": {
            "description": "Wallet transactions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Wallet not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletNotFoundResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      }
    },
    "/v1/wallets/{walletId}/rpc": {
      "post": {
        "summary": "Wallet RPC Operations",
        "description": "Performs comprehensive RPC operations on a wallet including native token transfers and ERC-20 contract interactions. Supports Send operations for native token transfers and Call operations for ERC-20 contract methods on both EVM (Ethereum Sepolia) and Starknet networks. View methods return both hex and parsed data, while state-changing methods return transaction IDs.",
        "tags": ["Wallets"],
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "walletId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Wallet ID",
            "example": "d0l66us361cm2p5777kpihjx"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WalletRPCRequest"
              },
              "examples": {
                "send_evm_native": {
                  "summary": "Send Native ETH (EVM)",
                  "description": "Transfer native ETH on Ethereum Sepolia testnet",
                  "value": {
                    "chain_type": "EVM",
                    "chain_id": "11155111",
                    "type": "Send",
                    "data": {
                      "reciever": "0x1ed419492279cf08b558326c2e66eae03be20d47",
                      "amount": "100000000000000"
                    }
                  }
                },
                "erc20_balance_check": {
                  "summary": "Check ERC-20 Token Balance (EVM)",
                  "description": "View call to check token balance on EVM",
                  "value": {
                    "chain_type": "EVM",
                    "chain_id": "11155111",
                    "type": "Call",
                    "data": {
                      "type": "ERC20",
                      "address": "0xE918A5a47b8e0AFAC2382bC5D1e981613e63fB07",
                      "method": "balanceOf",
                      "params": ["0xc2301b62ff12DfBC708894B1d20FAfE31Cc6Cb0a"]
                    }
                  }
                },
                "erc20_approve": {
                  "summary": "Approve ERC-20 Token Spending (EVM)",
                  "description": "State-changing call to approve token spending on EVM",
                  "value": {
                    "chain_type": "EVM",
                    "chain_id": "11155111",
                    "type": "Call",
                    "data": {
                      "type": "ERC20",
                      "address": "0xE918A5a47b8e0AFAC2382bC5D1e981613e63fB07",
                      "method": "approve",
                      "params": [
                        "0x34e50a179c9e497c43b14275413425c80253edd2",
                        "1000"
                      ]
                    }
                  }
                },
                "erc20_transfer": {
                  "summary": "Transfer ERC-20 Tokens (EVM)",
                  "description": "State-changing call to transfer tokens on EVM",
                  "value": {
                    "chain_type": "EVM",
                    "chain_id": "11155111",
                    "type": "Call",
                    "data": {
                      "type": "ERC20",
                      "address": "0xE918A5a47b8e0AFAC2382bC5D1e981613e63fB07",
                      "method": "transfer",
                      "params": [
                        "0x34e50a179c9e497c43b14275413425c80253edd2",
                        "1"
                      ]
                    }
                  }
                },
                "starknet_balance_check": {
                  "summary": "Check ERC-20 Token Balance (Starknet)",
                  "description": "View call to check token balance on Starknet",
                  "value": {
                    "chain_type": "STARKNET",
                    "chain_id": "21280703052830640944970871415780893550344133951",
                    "type": "Call",
                    "data": {
                      "type": "ERC20",
                      "address": "0x04718f5a0fc34cc1af16a1cdee98ffb20c31f5cd61d6ab07201858f4287c938d",
                      "method": "balanceOf",
                      "params": [
                        "0x0148a1989328bde22c510a9f637c44e87817bf2f3e2760b783575789b23bf2df"
                      ]
                    }
                  }
                },
                "starknet_approve": {
                  "summary": "Approve ERC-20 Token Spending (Starknet)",
                  "description": "State-changing call to approve token spending on Starknet",
                  "value": {
                    "chain_type": "STARKNET",
                    "chain_id": "21280703052830640944970871415780893550344133951",
                    "type": "Call",
                    "data": {
                      "type": "ERC20",
                      "address": "0x04718f5a0fc34cc1af16a1cdee98ffb20c31f5cd61d6ab07201858f4287c938d",
                      "method": "approve",
                      "params": [
                        "0x30bc78c905609a394b0135e3c2685e8014c812b154cba3a0a571bf7899c5ada",
                        "1000"
                      ]
                    }
                  }
                },
                "bitcoin_send": {
                  "summary": "Send Bitcoin",
                  "description": "Transfer Bitcoin on testnet",
                  "value": {
                    "chain_type": "BITCOIN",
                    "chain_id": "testnet",
                    "type": "Send",
                    "data": {
                      "reciever": "tb1qz0pnh98kfynptg9dtkj06f7sqnlxl3dxnmnjw4",
                      "amount": "10000"
                    }
                  }
                },
                "starknet_native_send": {
                  "summary": "Send Native Starknet Token",
                  "description": "Transfer native STRK tokens on Starknet with token_id",
                  "value": {
                    "chain_type": "STARKNET",
                    "chain_id": "21280703052830640944970871415780893550344133951",
                    "type": "Send",
                    "data": {
                      "reciever": "0x0437b14f4ab3d975f97c771912c44e5b1b1d67b6a5d1718f5d09a6c085f8c977",
                      "amount": "100000000000000000",
                      "token_id": "0x04718f5a0fc34cc1af16a1cdee98ffb20c31f5cd61d6ab07201858f4287c938d"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "RPC operation completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletRPCResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or transaction failed",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/WalletErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/WalletAmountErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/WalletTokenIdErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/WalletTransactionErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/WalletInsufficientBalanceErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/WalletInvalidAddressErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/WalletUnsupportedChainErrorResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Wallet not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Wallet loading or transaction save failed",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/WalletLoadErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/WalletSaveTransactionErrorResponse"
                    }
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletRPCRateLimitResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      }
    },
    "/v1/quorums": {
      "get": {
        "summary": "Get key quorums",
        "description": "Retrieves all key quorums for a specific app",
        "tags": ["Key Quorums"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "App ID",
            "example": "cmcx1p0y50315i80ldhmlcnmm"
          },
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Catalog App ID",
            "example": "cla04x0d00002nyb6oofp5dqh"
          }
        ],
        "responses": {
          "200": {
            "description": "Key quorums retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuorumsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "App not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppNotFoundResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      },
      "post": {
        "summary": "Create key quorum",
        "description": "Creates a new key quorum for authorization management",
        "tags": ["Key Quorums"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "App ID",
            "example": "cmcx1p0y50315i80ldhmlcnmm"
          },
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Catalog App ID",
            "example": "cla04x0d00002nyb6oofp5dqh"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateQuorumRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Key quorum created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quorum"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "App not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppNotFoundResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      }
    },
    "/v1/quorums/{quorumId}": {
      "get": {
        "summary": "Get key quorum",
        "description": "Retrieves details of a specific key quorum",
        "tags": ["Key Quorums"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "App ID",
            "example": "cmcx1p0y50315i80ldhmlcnmm"
          },
          {
            "name": "quorumId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Key quorum ID",
            "example": "qsz36nck6u0z28lluuqkin98"
          },
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Catalog App ID",
            "example": "cla04x0d00002nyb6oofp5dqh"
          }
        ],
        "responses": {
          "200": {
            "description": "Key quorum details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quorum"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Key quorum not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuorumNotFoundResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      },
      "put": {
        "summary": "Update key quorum",
        "description": "Updates a specific key quorum's configuration",
        "tags": ["Key Quorums"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "App ID",
            "example": "cmcx1p0y50315i80ldhmlcnmm"
          },
          {
            "name": "quorumId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Key quorum ID",
            "example": "qsz36nck6u0z28lluuqkin98"
          },
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Catalog App ID",
            "example": "cla04x0d00002nyb6oofp5dqh"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateQuorumRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Key quorum updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quorum"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Key quorum not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuorumNotFoundResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      },
      "delete": {
        "summary": "Delete key quorum",
        "description": "Deletes a specific key quorum",
        "tags": ["Key Quorums"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "App ID",
            "example": "cmcx1p0y50315i80ldhmlcnmm"
          },
          {
            "name": "quorumId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Key quorum ID",
            "example": "qsz36nck6u0z28lluuqkin98"
          },
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Catalog App ID",
            "example": "cla04x0d00002nyb6oofp5dqh"
          }
        ],
        "responses": {
          "200": {
            "description": "Key quorum deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Key quorum not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuorumNotFoundResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      }
    },
    "/v1/policies": {
      "post": {
        "summary": "Create policy",
        "description": "Create a new policy with rules for controlling wallet operations",
        "tags": ["Policies"],
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Catalog App ID",
            "example": "cla04x0d00002nyb6oofp5dqh"
          },
          {
            "name": "privy-authorization-signature",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Request authorization signature. If multiple signatures are required, they should be comma separated.",
            "example": "signature1,signature2"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePolicyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Policy created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      }
    },
    "/v1/policies/{policyId}": {
      "get": {
        "summary": "Get policy",
        "description": "Get a policy by policy ID",
        "tags": ["Policies"],
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24
            },
            "description": "Policy ID",
            "example": "tb54eps4z44ed0jepousxi4n"
          },
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Catalog App ID",
            "example": "cla04x0d00002nyb6oofp5dqh"
          }
        ],
        "responses": {
          "200": {
            "description": "Policy retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Policy not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyNotFoundResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      },
      "patch": {
        "summary": "Update policy",
        "description": "Update a policy by policy ID",
        "tags": ["Policies"],
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24
            },
            "description": "Policy ID",
            "example": "tb54eps4z44ed0jepousxi4n"
          },
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Catalog App ID",
            "example": "cla04x0d00002nyb6oofp5dqh"
          },
          {
            "name": "privy-authorization-signature",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Request authorization signature. If multiple signatures are required, they should be comma separated.",
            "example": "signature1,signature2"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePolicyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Policy updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Policy not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyNotFoundResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      },
      "delete": {
        "summary": "Delete policy",
        "description": "Delete a policy by policy ID",
        "tags": ["Policies"],
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24
            },
            "description": "Policy ID",
            "example": "tb54eps4z44ed0jepousxi4n"
          },
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Catalog App ID",
            "example": "cla04x0d00002nyb6oofp5dqh"
          },
          {
            "name": "privy-authorization-signature",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Request authorization signature. If multiple signatures are required, they should be comma separated.",
            "example": "signature1,signature2"
          }
        ],
        "responses": {
          "200": {
            "description": "Policy deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Policy not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyNotFoundResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      }
    },
    "/v1/policies/{policyId}/rules": {
      "post": {
        "summary": "Create policy rule",
        "description": "Create a new rule within a policy",
        "tags": ["Policy Rules"],
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24
            },
            "description": "Policy ID",
            "example": "tb54eps4z44ed0jepousxi4n"
          },
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Catalog App ID",
            "example": "cla04x0d00002nyb6oofp5dqh"
          },
          {
            "name": "privy-authorization-signature",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Request authorization signature. If multiple signatures are required, they should be comma separated.",
            "example": "signature1,signature2"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePolicyRuleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Policy rule created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyRuleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Policy not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyNotFoundResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      }
    },
    "/v1/policies/{policyId}/rules/{ruleId}": {
      "get": {
        "summary": "Get policy rule",
        "description": "Get a specific rule within a policy",
        "tags": ["Policy Rules"],
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24
            },
            "description": "Policy ID",
            "example": "tb54eps4z44ed0jepousxi4n"
          },
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Rule ID",
            "example": "rule_abc123def456"
          },
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Catalog App ID",
            "example": "cla04x0d00002nyb6oofp5dqh"
          }
        ],
        "responses": {
          "200": {
            "description": "Policy rule retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyRuleResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Policy or rule not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyRuleNotFoundResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      },
      "patch": {
        "summary": "Update policy rule",
        "description": "Update a specific rule within a policy",
        "tags": ["Policy Rules"],
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24
            },
            "description": "Policy ID",
            "example": "tb54eps4z44ed0jepousxi4n"
          },
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Rule ID",
            "example": "rule_abc123def456"
          },
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Catalog App ID",
            "example": "cla04x0d00002nyb6oofp5dqh"
          },
          {
            "name": "privy-authorization-signature",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Request authorization signature. If multiple signatures are required, they should be comma separated.",
            "example": "signature1,signature2"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePolicyRuleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Policy rule updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyRuleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Policy or rule not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyRuleNotFoundResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      },
      "delete": {
        "summary": "Delete policy rule",
        "description": "Delete a specific rule within a policy",
        "tags": ["Policy Rules"],
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 24,
              "maxLength": 24
            },
            "description": "Policy ID",
            "example": "tb54eps4z44ed0jepousxi4n"
          },
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Rule ID",
            "example": "rule_abc123def456"
          },
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Catalog App ID",
            "example": "cla04x0d00002nyb6oofp5dqh"
          },
          {
            "name": "privy-authorization-signature",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Request authorization signature. If multiple signatures are required, they should be comma separated.",
            "example": "signature1,signature2"
          }
        ],
        "responses": {
          "200": {
            "description": "Policy rule deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Policy or rule not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyRuleNotFoundResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      }
    },
    "/v1/apps/{appId}/allowlist": {
      "get": {
        "summary": "Get allowlist entries",
        "description": "Get the allowlist entries for an app",
        "tags": ["Apps"],
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "App ID",
            "example": "cmcx1p0y50315i80ldhmlcnmm"
          },
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of your Catalog app",
            "example": "cla04x0d00002nyb6oofp5dqh"
          }
        ],
        "responses": {
          "200": {
            "description": "Allowlist entries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AllowlistEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "App not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "App not found"
                    }
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      },
      "post": {
        "summary": "Add user to allowlist",
        "description": "Add a user's email address, phone number, or wallet address to the allowlist for your app",
        "tags": ["Apps"],
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "App ID",
            "example": "cmcx1p0y50315i80ldhmlcnmm"
          },
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of your Catalog app",
            "example": "cla04x0d00002nyb6oofp5dqh"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAllowlistEntryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User added to allowlist successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllowlistEntry"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid allowlist entry"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "App not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "App not found"
                    }
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      },
      "delete": {
        "summary": "Remove entry from allowlist",
        "description": "Remove an allowlist entry by its ID. You can obtain the ID by getting your current allowlist.",
        "tags": ["Apps"],
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "App ID",
            "example": "cmcx1p0y50315i80ldhmlcnmm"
          },
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of your Catalog app",
            "example": "cla04x0d00002nyb6oofp5dqh"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The ID of the allowlist entry to be removed. You can obtain this ID by getting your current allowlist.",
                    "example": "clpa828s4001hl90f6dxoksrg"
                  }
                },
                "required": ["id"]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Allowlist entry removed successfully"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid allowlist entry ID"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "App not found or allowlist entry not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Allowlist entry not found"
                    }
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      }
    },
    "/v1/apps/{appId}/denylist": {
      "get": {
        "summary": "Get denylist entries",
        "description": "Get the denylist entries for an app. This is a paginated query that returns up to 1000 denylist entries per request.",
        "tags": ["Apps"],
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "App ID",
            "example": "cmcx1p0y50315i80ldhmlcnmm"
          },
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of your Catalog app",
            "example": "cla04x0d00002nyb6oofp5dqh"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Cursor for pagination. When requesting the first batch, do not include. For subsequent batches, use the next_cursor from the previous response.",
            "example": "clpa828s4001hl90f6dxoksrg"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            },
            "description": "Number of denylist entries to return. Defaults to 1000.",
            "example": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "Denylist entries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DenylistResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "App not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "App not found"
                    }
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      },
      "post": {
        "summary": "Add user to denylist",
        "description": "Add a user's email address, phone number, or wallet address to the denylist for your app",
        "tags": ["Apps"],
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "App ID",
            "example": "cmcx1p0y50315i80ldhmlcnmm"
          },
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of your Catalog app",
            "example": "cla04x0d00002nyb6oofp5dqh"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDenylistEntryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User added to denylist successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DenylistEntry"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid denylist entry"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "App not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "App not found"
                    }
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      },
      "delete": {
        "summary": "Remove entry from denylist",
        "description": "Remove a denylist entry by its ID. You can obtain the ID by getting your current denylist.",
        "tags": ["Apps"],
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "App ID",
            "example": "cmcx1p0y50315i80ldhmlcnmm"
          },
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of your Catalog app",
            "example": "cla04x0d00002nyb6oofp5dqh"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The ID of the denylist entry to be removed. You can obtain this ID by getting your current denylist.",
                    "example": "clpa828s4001hl90f6dxoksrg"
                  }
                },
                "required": ["id"]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Denylist entry removed successfully"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid denylist entry ID"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "App not found or denylist entry not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Denylist entry not found"
                    }
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      }
    },
    "/v1/apps/{appId}/mfa_configuration": {
      "get": {
        "summary": "Get MFA configuration",
        "description": "Get Multi-Factor Authentication configuration for an app",
        "tags": ["Apps"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "App ID",
            "example": "cmcx1p0y50315i80ldhmlcnmm"
          },
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of your Catalog app",
            "example": "cla04x0d00002nyb6oofp5dqh"
          },
          {
            "name": "privy-client",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Privy client identifier for dashboard requests",
            "example": "privy-dashboard:1.0.0"
          }
        ],
        "responses": {
          "200": {
            "description": "MFA configuration retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MFAConfiguration"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "App not found or MFA configuration not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "MFA configuration not found"
                    }
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      },
      "put": {
        "summary": "Update MFA configuration",
        "description": "Update Multi-Factor Authentication configuration for an app",
        "tags": ["Apps"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "App ID",
            "example": "cmcx1p0y50315i80ldhmlcnmm"
          },
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of your Catalog app",
            "example": "cla04x0d00002nyb6oofp5dqh"
          },
          {
            "name": "privy-client",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Privy client identifier for dashboard requests",
            "example": "privy-dashboard:1.0.0"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMFAConfigurationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "MFA configuration updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MFAConfiguration"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid MFA configuration"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "App not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "App not found"
                    }
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      }
    },
    "/v1/apps/{appId}/session_config": {
      "get": {
        "summary": "Get session configuration",
        "description": "Get session and token lifetime configuration for an app",
        "tags": ["Apps"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "App ID",
            "example": "cmcx1p0y50315i80ldhmlcnmm"
          },
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of your Catalog app",
            "example": "cla04x0d00002nyb6oofp5dqh"
          },
          {
            "name": "privy-client",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Privy client identifier for dashboard requests",
            "example": "privy-dashboard:1.0.0"
          }
        ],
        "responses": {
          "200": {
            "description": "Session configuration retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionConfiguration"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "App not found or session configuration not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Session configuration not found"
                    }
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      },
      "put": {
        "summary": "Update session configuration",
        "description": "Update session and token lifetime configuration for an app",
        "tags": ["Apps"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "App ID",
            "example": "cmcx1p0y50315i80ldhmlcnmm"
          },
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of your Catalog app",
            "example": "cla04x0d00002nyb6oofp5dqh"
          },
          {
            "name": "privy-client",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Privy client identifier for dashboard requests",
            "example": "privy-dashboard:1.0.0"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSessionConfigurationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Session configuration updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionConfiguration"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid session configuration"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "App not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "App not found"
                    }
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      }
    },
    "/v1/apps/{appId}/test_credentials": {
      "get": {
        "summary": "Get test credentials",
        "description": "Retrieve test accounts and credentials for development and testing purposes",
        "tags": ["Apps"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "App ID",
            "example": "cmcx1p0y50315i80ldhmlcnmm"
          },
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of your Catalog app",
            "example": "cla04x0d00002nyb6oofp5dqh"
          },
          {
            "name": "privy-client",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Privy client identifier for dashboard requests",
            "example": "privy-dashboard:1.0.0"
          }
        ],
        "responses": {
          "200": {
            "description": "Test credentials retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCredentialsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "App not found or no test credentials available",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "No test credentials found"
                    }
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      },
      "post": {
        "summary": "Create test credentials",
        "description": "Create new test accounts and credentials for development and testing purposes",
        "tags": ["Apps"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "App ID",
            "example": "cmcx1p0y50315i80ldhmlcnmm"
          },
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of your Catalog app",
            "example": "cla04x0d00002nyb6oofp5dqh"
          },
          {
            "name": "privy-client",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Privy client identifier for dashboard requests",
            "example": "privy-dashboard:1.0.0"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Empty object or no body required to create test credentials",
                "example": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Test credentials created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCredential"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to create test credentials"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "App not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "App not found"
                    }
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      }
    },
    "/v1/apps/{appId}/oauth": {
      "get": {
        "summary": "Get OAuth configuration",
        "description": "Get OAuth configuration for a specific provider",
        "tags": ["Apps"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "App ID",
            "example": "cmcx1p0y50315i80ldhmlcnmm"
          },
          {
            "name": "provider",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "google",
                "apple",
                "twitter",
                "discord",
                "github",
                "tiktok",
                "line",
                "linkedin",
                "spotify",
                "instagram"
              ]
            },
            "description": "OAuth provider name",
            "example": "google"
          },
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of your Catalog app",
            "example": "cla04x0d00002nyb6oofp5dqh"
          },
          {
            "name": "privy-client",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Privy client identifier for dashboard requests",
            "example": "privy-dashboard:1.0.0"
          }
        ],
        "responses": {
          "200": {
            "description": "OAuth configuration retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthConfiguration"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "App not found or OAuth configuration not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "OAuth configuration not found"
                    }
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      },
      "put": {
        "summary": "Configure custom OAuth provider",
        "description": "Configure custom OAuth provider settings including client ID, client secret, and scopes",
        "tags": ["Apps"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "App ID",
            "example": "cmcx1p0y50315i80ldhmlcnmm"
          },
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of your Catalog app",
            "example": "cla04x0d00002nyb6oofp5dqh"
          },
          {
            "name": "privy-client",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Privy client identifier for dashboard requests",
            "example": "privy-dashboard:1.0.0"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigureOAuthProviderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OAuth configuration updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthConfiguration"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid OAuth configuration"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "App not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "App not found"
                    }
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      }
    },
    "/v1/users": {
      "post": {
        "summary": "Create user",
        "description": "Create a new user with linked accounts. Optionally pre-generate embedded wallets for the user.",
        "tags": ["Users"],
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of your Catalog app",
            "example": "cla04x0d00002nyb6oofp5dqh"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "linked_accounts": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "address": {
                          "type": "string",
                          "description": "Account address (email, wallet address, etc.)",
                          "example": "user@example.com"
                        },
                        "type": {
                          "type": "string",
                          "enum": ["email", "wallet", "farcaster", "passkey"],
                          "description": "Type of linked account",
                          "example": "email"
                        }
                      },
                      "required": ["type"]
                    },
                    "description": "Array of linked accounts for the user"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid linked accounts"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      },
      "get": {
        "summary": "Get all users",
        "description": "Get a list of all users in the app",
        "tags": ["Users"],
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of your Catalog app",
            "example": "cla04x0d00002nyb6oofp5dqh"
          },
          {
            "name": "wallet",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "User's wallet address",
            "example": "0xE6bFb4137F3A8C069F98cc775f324A84FE45FdFF"
          },
          {
            "name": "email",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "User's email address",
            "example": "user@example.com"
          },
          {
            "name": "auth-id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "User's custom authentication ID",
            "example": "custom_user_123"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100
            },
            "description": "Maximum number of users to return",
            "example": 50
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            },
            "description": "Number of users to skip",
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "users": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    },
                    "total": {
                      "type": "integer",
                      "description": "Total number of users",
                      "example": 150
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      }
    },
    "/v1/users/{userId}": {
      "get": {
        "summary": "Get user by ID",
        "description": "Get a user by user ID",
        "tags": ["Users"],
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID",
            "example": "did:privy:cm3np4u9j001rc8b73seqmqqk"
          },
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of your Catalog app",
            "example": "cla04x0d00002nyb6oofp5dqh"
          }
        ],
        "responses": {
          "200": {
            "description": "User data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      },
      "delete": {
        "summary": "Delete user",
        "description": "Delete a user by user ID",
        "tags": ["Users"],
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID",
            "example": "did:privy:cm3np4u9j001rc8b73seqmqqk"
          },
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of your Catalog app",
            "example": "cla04x0d00002nyb6oofp5dqh"
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      }
    },
    "/v1/users/{userId}/metadata": {
      "put": {
        "summary": "Add metadata",
        "description": "Add metadata to a user",
        "tags": ["Users"],
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID",
            "example": "did:privy:cm3np4u9j001rc8b73seqmqqk"
          },
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of your Catalog app",
            "example": "cla04x0d00002nyb6oofp5dqh"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "type": "object",
                    "description": "Custom metadata to add to the user",
                    "example": {
                      "preferences": {
                        "theme": "dark",
                        "notifications": true
                      },
                      "profile": {
                        "bio": "Software developer"
                      }
                    }
                  }
                },
                "required": ["metadata"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Custom metadata added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      }
    },
    "/v1/users/{userId}/wallets/pregenerate": {
      "post": {
        "summary": "Pregenerate wallets",
        "description": "Pregenerate embedded wallets for a user",
        "tags": ["Users"],
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID",
            "example": "did:privy:cm3np4u9j001rc8b73seqmqqk"
          },
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of your Catalog app",
            "example": "cla04x0d00002nyb6oofp5dqh"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "wallet_config": {
                    "type": "object",
                    "properties": {
                      "chain_id": {
                        "type": "string",
                        "description": "Chain ID for the wallet",
                        "example": "eip155:1"
                      },
                      "wallet_type": {
                        "type": "string",
                        "enum": ["embedded"],
                        "description": "Type of wallet to generate",
                        "example": "embedded"
                      }
                    },
                    "required": ["chain_id", "wallet_type"]
                  }
                },
                "required": ["wallet_config"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Wallets pregenerated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "wallets": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Wallet ID",
                            "example": "wallet_123"
                          },
                          "address": {
                            "type": "string",
                            "description": "Wallet address",
                            "example": "0xE6bFb4137F3A8C069F98cc775f324A84FE45FdFF"
                          },
                          "chain_id": {
                            "type": "string",
                            "description": "Chain ID",
                            "example": "eip155:1"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid wallet configuration"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api.catalog.fi"
          }
        ]
      }
    },
    "/v1/apps/{appId}/funding": {
      "put": {
        "summary": "Update app funding configuration",
        "description": "Updates the funding configuration for an app, including payment methods (card, exchange, external wallets) and payment providers (MoonPay, Coinbase). This endpoint allows toggling specific funding methods and providers.",
        "tags": ["Apps"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "App ID",
            "example": "cmcx1p0y50315i80ldhmlcnmm"
          },
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of your Catalog app",
            "example": "cla04x0d00002nyb6oofp5dqh"
          },
          {
            "name": "privy-client",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Privy client identifier for dashboard requests",
            "example": "privy-dashboard:1.0.0"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "funding_config": {
                    "type": "object",
                    "properties": {
                      "methods": {
                        "type": "object",
                        "properties": {
                          "card_enabled": {
                            "type": "boolean",
                            "description": "Enable/disable card payments",
                            "example": true
                          },
                          "exchange_enabled": {
                            "type": "boolean",
                            "description": "Enable/disable exchange transfers",
                            "example": true
                          },
                          "external_wallets_enabled": {
                            "type": "boolean",
                            "description": "Enable/disable external wallet transfers",
                            "example": false
                          }
                        },
                        "required": [
                          "card_enabled",
                          "exchange_enabled",
                          "external_wallets_enabled"
                        ]
                      },
                      "moonpay_enabled": {
                        "type": "boolean",
                        "description": "Enable/disable MoonPay as payment provider",
                        "example": true
                      },
                      "coinbase_enabled": {
                        "type": "boolean",
                        "description": "Enable/disable Coinbase as payment provider",
                        "example": false
                      }
                    },
                    "required": [
                      "methods",
                      "moonpay_enabled",
                      "coinbase_enabled"
                    ]
                  }
                },
                "required": ["funding_config"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Funding configuration updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid funding configuration"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "App not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "App not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/apps/{appId}/funding/settings": {
      "put": {
        "summary": "Update app funding settings",
        "description": "Updates the funding settings for an app, including default recommended currency (chain and asset), default recommended amount, prompt funding on wallet creation, and cross-chain bridging settings. This endpoint is used in the app/user management/account funding/settings tab.",
        "tags": ["Apps"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "App ID",
            "example": "cmcx1p0y50315i80ldhmlcnmm"
          },
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of your Catalog app",
            "example": "cla04x0d00002nyb6oofp5dqh"
          },
          {
            "name": "privy-client",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Privy client identifier for dashboard requests",
            "example": "privy-dashboard:1.0.0"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "funding_config": {
                    "type": "object",
                    "properties": {
                      "default_recommended_currency": {
                        "type": "object",
                        "properties": {
                          "chain": {
                            "type": "string",
                            "description": "Chain identifier (e.g., 'solana', 'eip155:1', 'eip155:137')",
                            "example": "solana"
                          },
                          "asset": {
                            "type": "string",
                            "description": "Asset type (e.g., 'native-currency', 'USDC')",
                            "example": "native-currency"
                          }
                        },
                        "required": ["chain", "asset"]
                      },
                      "default_recommended_amount": {
                        "type": "string",
                        "description": "Default recommended funding amount",
                        "example": "0.0001"
                      },
                      "prompt_funding_on_wallet_creation": {
                        "type": "boolean",
                        "description": "Whether to prompt funding on wallet creation",
                        "example": false
                      },
                      "cross_chain_bridging_enabled": {
                        "type": "boolean",
                        "description": "Whether cross-chain bridging is enabled",
                        "example": false
                      }
                    },
                    "required": [
                      "default_recommended_currency",
                      "default_recommended_amount",
                      "prompt_funding_on_wallet_creation",
                      "cross_chain_bridging_enabled"
                    ]
                  }
                },
                "required": ["funding_config"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Funding settings updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid funding settings"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "App not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "App not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/apps/{appId}/cross-app/providers": {
      "post": {
        "summary": "Enable or disable cross-app provider integration",
        "description": "Enables or disables integration with another app as a provider. This endpoint is used in the user management/integrations tab to manage cross-app connections.",
        "tags": ["Apps"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "App ID",
            "example": "cmcx1p0y50315i80ldhmlcnmm"
          },
          {
            "name": "catalog-app-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of your Catalog app",
            "example": "cla04x0d00002nyb6oofp5dqh"
          },
          {
            "name": "privy-client",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Privy client identifier for dashboard requests",
            "example": "privy-dashboard:1.0.0"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "provider_app_id": {
                    "type": "string",
                    "description": "ID of the provider app to enable/disable integration with",
                    "example": "cm04asygd041fmry9zmcyn5o5"
                  },
                  "enable_connection": {
                    "type": "boolean",
                    "description": "Whether to enable (true) or disable (false) the connection with the provider app",
                    "example": true
                  }
                },
                "required": ["provider_app_id", "enable_connection"]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Cross-app provider integration updated successfully",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid provider app ID"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "App or provider app not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "App not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "App": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the app",
            "example": "cmdie6l1300x2l70jd4hu8f3o"
          },
          "name": {
            "type": "string",
            "description": "Name of the application",
            "example": "New App"
          },
          "logo_url": {
            "type": "string",
            "nullable": true,
            "description": "URL of the app logo",
            "example": null
          },
          "icon_url": {
            "type": "string",
            "nullable": true,
            "description": "URL of the app icon",
            "example": null
          },
          "terms_and_conditions_url": {
            "type": "string",
            "nullable": true,
            "description": "URL for terms and conditions",
            "example": null
          },
          "privacy_policy_url": {
            "type": "string",
            "nullable": true,
            "description": "URL for privacy policy",
            "example": null
          },
          "require_users_accept_terms": {
            "type": "boolean",
            "nullable": true,
            "description": "Whether users are required to accept terms and conditions",
            "example": null
          },
          "theme": {
            "type": "string",
            "description": "App theme setting",
            "example": "System"
          },
          "accent_color": {
            "type": "string",
            "nullable": true,
            "description": "App accent color",
            "example": null
          },
          "show_wallet_login_first": {
            "type": "boolean",
            "description": "Whether to show wallet login first",
            "example": false
          },
          "allowed_domains": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of allowed domains for the app",
            "example": []
          },
          "allowed_native_app_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of allowed native app IDs",
            "example": []
          },
          "allowed_native_app_url_schemes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of allowed native app URL schemes",
            "example": []
          },
          "wallet_auth": {
            "type": "boolean",
            "description": "Whether wallet authentication is enabled",
            "example": true
          },
          "email_auth": {
            "type": "boolean",
            "description": "Whether email authentication is enabled",
            "example": true
          },
          "sms_auth": {
            "type": "boolean",
            "description": "Whether SMS authentication is enabled",
            "example": false
          },
          "guest_auth": {
            "type": "boolean",
            "description": "Whether guest authentication is enabled",
            "example": false
          },
          "solana_wallet_auth": {
            "type": "boolean",
            "description": "Whether Solana wallet authentication is enabled",
            "example": false
          },
          "telegram_auth": {
            "type": "boolean",
            "description": "Whether Telegram authentication is enabled",
            "example": false
          },
          "disable_plus_emails": {
            "type": "boolean",
            "description": "Whether to disable plus emails",
            "example": false
          },
          "google_oauth": {
            "type": "boolean",
            "description": "Whether Google OAuth is enabled",
            "example": false
          },
          "twitter_oauth": {
            "type": "boolean",
            "description": "Whether Twitter OAuth is enabled",
            "example": false
          },
          "discord_oauth": {
            "type": "boolean",
            "description": "Whether Discord OAuth is enabled",
            "example": false
          },
          "github_oauth": {
            "type": "boolean",
            "description": "Whether GitHub OAuth is enabled",
            "example": false
          },
          "tiktok_oauth": {
            "type": "boolean",
            "description": "Whether TikTok OAuth is enabled",
            "example": false
          },
          "line_oauth": {
            "type": "boolean",
            "description": "Whether Line OAuth is enabled",
            "example": false
          },
          "linkedin_oauth": {
            "type": "boolean",
            "description": "Whether LinkedIn OAuth is enabled",
            "example": false
          },
          "apple_oauth": {
            "type": "boolean",
            "description": "Whether Apple OAuth is enabled",
            "example": false
          },
          "spotify_oauth": {
            "type": "boolean",
            "description": "Whether Spotify OAuth is enabled",
            "example": false
          },
          "instagram_oauth": {
            "type": "boolean",
            "description": "Whether Instagram OAuth is enabled",
            "example": false
          },
          "farcaster_auth": {
            "type": "boolean",
            "description": "Whether Farcaster authentication is enabled",
            "example": false
          },
          "passkey_auth": {
            "type": "boolean",
            "description": "Whether passkey authentication is enabled",
            "example": false
          },
          "passkeys_for_signup_enabled": {
            "type": "boolean",
            "description": "Whether passkeys are enabled for signup",
            "example": false
          },
          "custom_jwt_auth": {
            "type": "boolean",
            "description": "Whether custom JWT authentication is enabled",
            "example": false
          },
          "allowlist_enabled": {
            "type": "boolean",
            "description": "Whether allowlist is enabled",
            "example": false
          },
          "denylist_enabled": {
            "type": "boolean",
            "description": "Whether denylist is enabled",
            "example": true
          },
          "allowlist_config": {
            "type": "object",
            "properties": {
              "error_title": {
                "type": "string",
                "nullable": true,
                "description": "Error title for allowlist"
              },
              "error_detail": {
                "type": "string",
                "nullable": true,
                "description": "Error detail for allowlist"
              },
              "cta_text": {
                "type": "string",
                "nullable": true,
                "description": "Call to action text for allowlist"
              },
              "cta_link": {
                "type": "string",
                "nullable": true,
                "description": "Call to action link for allowlist"
              }
            }
          },
          "wallet_connect_cloud_project_id": {
            "type": "string",
            "nullable": true,
            "description": "WalletConnect Cloud project ID",
            "example": null
          },
          "custom_api_url": {
            "type": "string",
            "nullable": true,
            "description": "Custom API URL for the app",
            "example": null
          },
          "embedded_wallet_config": {
            "type": "object",
            "properties": {
              "create_on_login": {
                "type": "string",
                "description": "When to create embedded wallets",
                "example": "off"
              },
              "ethereum": {
                "type": "object",
                "properties": {
                  "create_on_login": {
                    "type": "string",
                    "description": "When to create Ethereum wallets",
                    "example": "off"
                  }
                }
              },
              "solana": {
                "type": "object",
                "properties": {
                  "create_on_login": {
                    "type": "string",
                    "description": "When to create Solana wallets",
                    "example": "off"
                  }
                }
              },
              "user_owned_recovery_options": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "User owned recovery options",
                "example": ["user-passcode"]
              },
              "require_user_password_on_create": {
                "type": "boolean",
                "description": "Whether to require user password on wallet creation",
                "example": false
              },
              "require_user_owned_recovery_on_create": {
                "type": "boolean",
                "description": "Whether to require user owned recovery on wallet creation",
                "example": false
              },
              "mode": {
                "type": "string",
                "description": "Embedded wallet mode",
                "example": "user-controlled-server-wallets-only"
              }
            }
          },
          "enforce_wallet_uis": {
            "type": "boolean",
            "description": "Whether to enforce wallet UIs",
            "example": true
          },
          "legacy_wallet_ui_config": {
            "type": "boolean",
            "description": "Whether legacy wallet UI config is enabled",
            "example": false
          },
          "fiat_on_ramp_enabled": {
            "type": "boolean",
            "description": "Whether fiat on-ramp is enabled",
            "example": false
          },
          "captcha_enabled": {
            "type": "boolean",
            "description": "Whether captcha is enabled",
            "example": false
          },
          "twitter_oauth_on_mobile_enabled": {
            "type": "boolean",
            "description": "Whether Twitter OAuth is enabled on mobile",
            "example": true
          },
          "mfa_methods": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Multi-factor authentication methods",
            "example": []
          },
          "captcha_site_key": {
            "type": "string",
            "description": "Captcha site key",
            "example": "t:0x4AAAAAAAM8ceq5KhP1uJBt"
          },
          "verification_key": {
            "type": "string",
            "description": "Verification key for the app",
            "example": "-----BEGIN PUBLIC KEY-----MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE9OHr4bSwsbVjJXURir4kSU1tDSFGkW5LEgwUM6gcE6y1K5+yeCdzxlitEU5RaIs075VhYDsAz9kbTdw8ROj+qQ==-----END PUBLIC KEY-----"
          },
          "funding_config": {
            "type": "object",
            "properties": {
              "default_recommended_currency": {
                "type": "object",
                "properties": {
                  "chain": {
                    "type": "string",
                    "description": "Default chain for funding",
                    "example": "eip155:1"
                  },
                  "asset": {
                    "type": "string",
                    "description": "Default asset for funding",
                    "example": "native-currency"
                  }
                }
              },
              "default_recommended_amount": {
                "type": "string",
                "description": "Default recommended funding amount",
                "example": "0.0001"
              },
              "methods": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Available funding methods",
                "example": ["coinbase-onramp"]
              },
              "options": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "method": {
                      "type": "string",
                      "description": "Funding method",
                      "example": "exchange"
                    },
                    "provider": {
                      "type": "string",
                      "description": "Funding provider",
                      "example": "coinbase"
                    }
                  }
                }
              },
              "prompt_funding_on_wallet_creation": {
                "type": "boolean",
                "description": "Whether to prompt funding on wallet creation",
                "example": false
              },
              "cross_chain_bridging_enabled": {
                "type": "boolean",
                "description": "Whether cross-chain bridging is enabled",
                "example": false
              }
            }
          },
          "max_linked_wallets_per_user": {
            "type": "integer",
            "nullable": true,
            "description": "Maximum number of linked wallets per user",
            "example": null
          },
          "farcaster_link_wallets_enabled": {
            "type": "boolean",
            "description": "Whether Farcaster link wallets is enabled",
            "example": false
          },
          "whatsapp_enabled": {
            "type": "boolean",
            "description": "Whether WhatsApp integration is enabled",
            "example": false
          },
          "created_at": {
            "type": "integer",
            "description": "Timestamp when the app was created",
            "example": 1753421993
          },
          "updated_at": {
            "type": "integer",
            "description": "Timestamp when the app was last updated",
            "example": 1753421993
          },
          "env": {
            "type": "string",
            "description": "Environment of the app",
            "example": "dev"
          },
          "usersCount": {
            "type": "integer",
            "description": "Number of users in the app",
            "example": -1
          },
          "development_apps": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Development apps associated with this app",
            "example": []
          },
          "production_app": {
            "type": "object",
            "nullable": true,
            "description": "Production app associated with this app",
            "example": null
          },
          "cookie_auth_enabled": {
            "type": "boolean",
            "description": "Whether cookie authentication is enabled",
            "example": false
          },
          "cookie_domain": {
            "type": "string",
            "nullable": true,
            "description": "Cookie domain for authentication",
            "example": null
          },
          "cookie_same_site_lax": {
            "type": "boolean",
            "description": "Whether cookie same site lax is enabled",
            "example": false
          },
          "has_updated_login_methods": {
            "type": "boolean",
            "description": "Whether login methods have been updated",
            "example": false
          },
          "login_methods_requested": {
            "type": "string",
            "nullable": true,
            "description": "Login methods that were requested",
            "example": null
          },
          "allowed_android_signing_key_hashes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Allowed Android signing key hashes",
            "example": []
          },
          "return_identity_tokens": {
            "type": "boolean",
            "description": "Whether to return identity tokens",
            "example": false
          },
          "session_timeout_minutes": {
            "type": "integer",
            "nullable": true,
            "description": "Session timeout in minutes",
            "example": null
          },
          "session_inactivity_window_minutes": {
            "type": "integer",
            "nullable": true,
            "description": "Session inactivity window in minutes",
            "example": null
          },
          "access_token_lifetime_minutes": {
            "type": "integer",
            "nullable": true,
            "description": "Access token lifetime in minutes",
            "example": null
          },
          "id_token_lifetime_minutes": {
            "type": "integer",
            "nullable": true,
            "description": "ID token lifetime in minutes",
            "example": null
          },
          "account_transfer_enabled": {
            "type": "boolean",
            "nullable": true,
            "description": "Whether account transfer is enabled",
            "example": null
          },
          "allowed_oauth_redirect_urls": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Allowed OAuth redirect URLs",
            "example": []
          },
          "delegated_actions_enabled": {
            "type": "boolean",
            "description": "Whether delegated actions are enabled",
            "example": false
          },
          "transaction_scanning_enabled": {
            "type": "boolean",
            "description": "Whether transaction scanning is enabled",
            "example": false
          },
          "native_onramp_provider_configs": {
            "type": "object",
            "description": "Native onramp provider configurations",
            "example": {}
          }
        }
      },
      "AppCreateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the application",
            "example": "New App"
          },
          "createWebClient": {
            "type": "boolean",
            "description": "Whether to create a web client",
            "example": true
          },
          "createMobileClient": {
            "type": "boolean",
            "description": "Whether to create a mobile client",
            "example": true
          }
        },
        "required": ["name"]
      },
      "AppUpdateRequest": {
        "type": "object",
        "properties": {
          "allowed_android_signing_key_hashes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Allowed Android signing key hashes for the app (Used in: app/configuration/settings/advanced)",
            "example": []
          },
          "terms_and_conditions_url": {
            "type": "string",
            "description": "URL for terms and conditions (Used in: app/configuration/terms&privacy)",
            "example": "https://hashira.io/terms-and-conditions"
          },
          "privacy_policy_url": {
            "type": "string",
            "description": "URL for privacy policy (Used in: app/configuration/terms&privacy)",
            "example": "https://hashira.io/privacy-policy"
          },
          "require_users_accept_terms": {
            "type": "boolean",
            "description": "Whether users are required to accept terms and conditions (Used in: app/configuration/terms&privacy)",
            "example": true
          },
          "name": {
            "type": "string",
            "description": "App name (Used in: app/configuration/branding, app/configuration/settings/general)",
            "example": "CatalogFi"
          },
          "logo_url": {
            "type": "string",
            "nullable": true,
            "description": "App logo URL (Used in: app/configuration/branding)",
            "example": null
          },
          "icon_url": {
            "type": "string",
            "nullable": true,
            "description": "App icon URL (Used in: app/configuration/branding)",
            "example": null
          },
          "theme": {
            "type": "string",
            "description": "App theme (Used in: app/configuration/branding)",
            "example": "System"
          },
          "accent_color": {
            "type": "string",
            "description": "App accent color (Used in: app/configuration/branding)",
            "example": "#5CFFD5"
          },
          "show_wallet_login_first": {
            "type": "boolean",
            "description": "Whether to show wallet login first (Used in: app/configuration/settings/general)",
            "example": true
          },
          "allowed_domains": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of allowed domains for the app (Used in: app/configuration/settings/domains)",
            "example": ["https://catalog.fi", "https://hashira.io"]
          },
          "allowed_oauth_redirect_urls": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Allowed OAuth redirect URLs for the app (Used in: app/configuration/settings/advanced)",
            "example": ["https://hashira.io/redirect"]
          },
          "wallet_auth": {
            "type": "boolean",
            "description": "Whether wallet authentication is enabled (Used in: app/configuration/settings/general)",
            "example": true
          },
          "email_auth": {
            "type": "boolean",
            "description": "Whether email authentication is enabled (Used in: app/configuration/settings/general)",
            "example": true
          },
          "sms_auth": {
            "type": "boolean",
            "description": "Whether SMS authentication is enabled (Used in: app/configuration/settings/general)",
            "example": false
          },
          "guest_auth": {
            "type": "boolean",
            "description": "Whether guest authentication is enabled (Used in: app/configuration/settings/general)",
            "example": false
          },
          "solana_wallet_auth": {
            "type": "boolean",
            "description": "Whether Solana wallet authentication is enabled (Used in: app/configuration/settings/general)",
            "example": true
          },
          "telegram_auth": {
            "type": "boolean",
            "description": "Whether Telegram authentication is enabled (Used in: app/configuration/settings/general)",
            "example": false
          },
          "passkey_auth": {
            "type": "boolean",
            "description": "Whether passkey authentication is enabled (Used in: app/configuration/settings/general)",
            "example": true
          },
          "allowlist_enabled": {
            "type": "boolean",
            "description": "Whether allowlist is enabled (Used in: app/configuration/settings/advanced)",
            "example": true
          },
          "captcha_enabled": {
            "type": "boolean",
            "description": "Whether captcha is enabled (Used in: app/configuration/settings/advanced)",
            "example": false
          },
          "max_linked_wallets_per_user": {
            "type": "integer",
            "description": "Maximum number of linked wallets per user (Used in: app/configuration/settings/advanced)",
            "example": 20
          },
          "farcaster_link_wallets_enabled": {
            "type": "boolean",
            "description": "Whether Farcaster link wallets is enabled (Used in: app/configuration/settings/advanced)",
            "example": false
          },
          "whatsapp_enabled": {
            "type": "boolean",
            "description": "Whether WhatsApp integration is enabled (Used in: app/configuration/settings/advanced)",
            "example": false
          },
          "allowlist_config": {
            "type": "object",
            "properties": {
              "error_title": {
                "type": "string",
                "nullable": true,
                "description": "Error title for allowlist (Used in: app/configuration/settings/advanced)",
                "example": null
              },
              "error_detail": {
                "type": "string",
                "nullable": true,
                "description": "Error detail for allowlist (Used in: app/configuration/settings/advanced)",
                "example": null
              },
              "cta_text": {
                "type": "string",
                "nullable": true,
                "description": "Call to action text for allowlist (Used in: app/configuration/settings/advanced)",
                "example": null
              },
              "cta_link": {
                "type": "string",
                "nullable": true,
                "description": "Call to action link for allowlist (Used in: app/configuration/settings/advanced)",
                "example": null
              }
            }
          },
          "embedded_wallet_config": {
            "type": "object",
            "properties": {
              "create_on_login": {
                "type": "string",
                "description": "When to create embedded wallets (Used in: app/configuration/settings/advanced)",
                "example": "users-without-wallets"
              },
              "ethereum": {
                "type": "object",
                "properties": {
                  "create_on_login": {
                    "type": "string",
                    "description": "When to create Ethereum wallets (Used in: app/configuration/settings/advanced)",
                    "example": "users-without-wallets"
                  }
                }
              },
              "solana": {
                "type": "object",
                "properties": {
                  "create_on_login": {
                    "type": "string",
                    "description": "When to create Solana wallets (Used in: app/configuration/settings/advanced)",
                    "example": "off"
                  }
                }
              },
              "user_owned_recovery_options": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "User owned recovery options (Used in: app/configuration/settings/advanced)",
                "example": ["user-passcode"]
              },
              "require_user_password_on_create": {
                "type": "boolean",
                "description": "Whether to require user password on wallet creation (Used in: app/configuration/settings/advanced)",
                "example": false
              },
              "require_user_owned_recovery_on_create": {
                "type": "boolean",
                "description": "Whether to require user owned recovery on wallet creation (Used in: app/configuration/settings/advanced)",
                "example": false
              },
              "mode": {
                "type": "string",
                "description": "Embedded wallet mode (Used in: app/configuration/settings/advanced)",
                "example": "user-controlled-server-wallets-only"
              }
            }
          },
          "funding_config": {
            "type": "object",
            "properties": {
              "default_recommended_currency": {
                "type": "object",
                "properties": {
                  "chain": {
                    "type": "string",
                    "description": "Default chain for funding (Used in: app/configuration/settings/advanced)",
                    "example": "eip155:1"
                  },
                  "asset": {
                    "type": "string",
                    "description": "Default asset for funding (Used in: app/configuration/settings/advanced)",
                    "example": "native-currency"
                  }
                }
              },
              "default_recommended_amount": {
                "type": "string",
                "description": "Default recommended funding amount (Used in: app/configuration/settings/advanced)",
                "example": "0.0001"
              },
              "methods": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Available funding methods (Used in: app/configuration/settings/advanced)",
                "example": ["coinbase-onramp"]
              },
              "options": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "method": {
                      "type": "string",
                      "description": "Funding method (Used in: app/configuration/settings/advanced)",
                      "example": "exchange"
                    },
                    "provider": {
                      "type": "string",
                      "description": "Funding provider (Used in: app/configuration/settings/advanced)",
                      "example": "coinbase"
                    }
                  }
                }
              },
              "prompt_funding_on_wallet_creation": {
                "type": "boolean",
                "description": "Whether to prompt funding on wallet creation (Used in: app/configuration/settings/advanced)",
                "example": false
              },
              "cross_chain_bridging_enabled": {
                "type": "boolean",
                "description": "Whether cross-chain bridging is enabled (Used in: app/configuration/settings/advanced)",
                "example": false
              }
            }
          },
          "wallet_connect_cloud_project_id": {
            "type": "string",
            "nullable": true,
            "description": "WalletConnect Cloud project ID for the app (Used in: app/configuration/integrations)",
            "example": null
          }
        }
      },
      "AppCreateResponse": {
        "type": "object",
        "properties": {
          "app": {
            "$ref": "#/components/schemas/App"
          },
          "secret": {
            "type": "string",
            "description": "App secret key for API authentication",
            "example": "4qsyqhhZVmpA3HTCoHMuBx9MpcEyZHApiAihCipZ6VFep61typyiStKC6MbAPSVoh9bJh2CPsGQybGmMGGRFdzgH"
          }
        }
      },
      "User": {
        "type": "object",
        "description": "User object representing a user in the Catalog system",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique user identifier (DID format)",
            "example": "did:catalog:cmcvh61po02lul70mgjj4kq21"
          },
          "created_at": {
            "type": "integer",
            "description": "Unix timestamp when user was created",
            "example": 1752036285
          },
          "linked_accounts": {
            "type": "array",
            "description": "User's linked authentication methods",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Account type (e.g., email, wallet)",
                  "example": "email"
                },
                "address": {
                  "type": "string",
                  "description": "Account address or identifier",
                  "example": "user@example.com"
                },
                "verified_at": {
                  "type": "integer",
                  "description": "Unix timestamp when account was verified",
                  "example": 1752036285
                },
                "first_verified_at": {
                  "type": "integer",
                  "description": "Unix timestamp when account was first verified",
                  "example": 1752036285
                },
                "latest_verified_at": {
                  "type": "integer",
                  "description": "Unix timestamp when account was last verified",
                  "example": 1753333327
                }
              },
              "required": ["type", "address"]
            }
          },
          "mfa_methods": {
            "type": "array",
            "description": "Multi-factor authentication methods",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "MFA method type",
                  "example": "passkey"
                },
                "verified_at": {
                  "type": "integer",
                  "description": "Unix timestamp when MFA was verified",
                  "example": 1741194420
                }
              },
              "required": ["type"]
            }
          },
          "has_accepted_terms": {
            "type": "boolean",
            "description": "Whether user has accepted terms and conditions",
            "example": true
          },
          "is_guest": {
            "type": "boolean",
            "description": "Whether user is a guest account",
            "example": false
          }
        },
        "required": [
          "id",
          "created_at",
          "linked_accounts",
          "mfa_methods",
          "has_accepted_terms",
          "is_guest"
        ]
      },
      "AppClient": {
        "type": "object",
        "description": "App client configuration object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Client ID",
            "example": "bllvm627xn0mjbcd3wbv5olpc"
          },
          "app_id": {
            "type": "string",
            "description": "App ID",
            "example": "cmcx1p0y50315i80ldhmlcnmm"
          },
          "short_id": {
            "type": "string",
            "description": "Short client ID",
            "example": "wbv5olpc"
          },
          "name": {
            "type": "string",
            "description": "Client name",
            "example": "Default web app client"
          },
          "client_type": {
            "type": "string",
            "description": "Type of client (web, mobile)",
            "example": "web"
          },
          "allowed_native_app_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Allowed native app IDs",
            "example": []
          },
          "allowed_native_app_url_schemes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Allowed native app URL schemes",
            "example": []
          },
          "allowed_domains": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Allowed domains for the client",
            "example": []
          },
          "cookie_auth_enabled": {
            "type": "boolean",
            "description": "Whether cookie authentication is enabled",
            "example": false
          },
          "cookie_auth_toggled_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When cookie auth was toggled",
            "example": null
          },
          "cookie_domain": {
            "type": "string",
            "nullable": true,
            "description": "Cookie domain",
            "example": null
          },
          "cookie_domain_verified_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When cookie domain was verified",
            "example": null
          },
          "use_app_cookie_domain_settings": {
            "type": "boolean",
            "description": "Whether to use app cookie domain settings",
            "example": false
          },
          "session_timeout_minutes": {
            "type": "integer",
            "nullable": true,
            "description": "Session timeout in minutes",
            "example": null
          },
          "session_inactivity_window_minutes": {
            "type": "integer",
            "nullable": true,
            "description": "Session inactivity window in minutes",
            "example": null
          },
          "access_token_lifetime_minutes": {
            "type": "integer",
            "nullable": true,
            "description": "Access token lifetime in minutes",
            "example": null
          },
          "id_token_lifetime_minutes": {
            "type": "integer",
            "nullable": true,
            "description": "ID token lifetime in minutes",
            "example": null
          },
          "apple_oauth_client_id_override": {
            "type": "string",
            "nullable": true,
            "description": "Apple OAuth client ID override",
            "example": null
          }
        },
        "required": [
          "id",
          "app_id",
          "short_id",
          "name",
          "client_type",
          "allowed_native_app_ids",
          "allowed_native_app_url_schemes",
          "allowed_domains",
          "cookie_auth_enabled",
          "use_app_cookie_domain_settings"
        ]
      },
      "CreateAppClientRequest": {
        "type": "object",
        "description": "Request body for creating a new app client",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the client",
            "example": "New dummy mobile client"
          },
          "client_type": {
            "type": "string",
            "description": "Type of client (web, mobile)",
            "example": "mobile"
          }
        },
        "required": ["name", "client_type"]
      },
      "UpdateAppClientRequest": {
        "type": "object",
        "description": "Request body for updating an app client",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the client",
            "example": "Default mobile app client"
          },
          "client_type": {
            "type": "string",
            "description": "Type of client (web, mobile)",
            "example": "mobile"
          },
          "allowed_domains": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Allowed domains for the client",
            "example": []
          },
          "use_app_cookie_domain_settings": {
            "type": "boolean",
            "description": "Whether to use app cookie domain settings",
            "example": false
          },
          "allowed_native_app_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Allowed native app IDs",
            "example": []
          },
          "allowed_native_app_url_schemes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Allowed native app URL schemes",
            "example": []
          },
          "session_timeout_minutes": {
            "type": "integer",
            "description": "Session timeout in minutes",
            "example": 144000
          },
          "session_inactivity_window_minutes": {
            "type": "integer",
            "description": "Session inactivity window in minutes",
            "example": 576000
          },
          "access_token_lifetime_minutes": {
            "type": "integer",
            "description": "Access token lifetime in minutes",
            "example": 60
          },
          "id_token_lifetime_minutes": {
            "type": "integer",
            "description": "ID token lifetime in minutes",
            "example": 600
          }
        }
      },

      "Wallet": {
        "type": "object",
        "description": "Wallet object representing a blockchain wallet in the Catalog system",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique wallet identifier",
            "example": "76f3f233-9a99-486e-bab2-dc0518ba3dac"
          },
          "address": {
            "type": "string",
            "description": "Wallet address on the blockchain",
            "example": "0xE918A5a47b8e0AFAC2382bC5D1e981613e63fB07"
          },
          "chain_id": {
            "type": "string",
            "description": "The chain the created wallets belong to. For more details on chainIds refer the wallet overview section",
            "example": "11155111"
          },
          "chain_type": {
            "type": "string",
            "enum": ["BITCOIN", "EVM", "SOLANA", "STARKNET", "SUI"],
            "description": "Type of blockchain for the wallet",
            "example": "EVM"
          },
          "app_id": {
            "type": "string",
            "description": "App ID associated with the wallet",
            "example": "4dba5ccb-5336-42d4-b43a-04b79a2192af"
          },
          "owner_id": {
            "type": "string",
            "description": "Owner ID associated with the wallet",
            "example": "188a45d3-0e92-403d-b377-d116ee59fddf"
          },
          "policy_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of policy IDs applied to the wallet",
            "example": []
          },
          "created_at": {
            "type": "integer",
            "description": "Timestamp when the wallet was created",
            "example": 1757931209
          }
        },
        "required": [
          "id",
          "address",
          "chain_type",
          "app_id",
          "owner_id",
          "policy_ids",
          "created_at"
        ]
      },
      "Wallets": {
        "type": "array",
        "description": "Array of wallet objects",
        "items": {
          "$ref": "#/components/schemas/Wallet"
        },
        "example": [
          {
            "id": "d17f3569-eadd-42dd-97a2-6165fb1d3c89",
            "address": "tb1p7r56lzu0g5p6mze2q34zmyp4rqkt277s0xshrz7gu8ahvych72kssd5ke0",
            "chain_type": "BITCOIN",
            "chain_id": "testnet",
            "app_id": "4dba5ccb-5336-42d4-b43a-04b79a2192af",
            "owner_id": "293b0aad-0c46-4667-b4b3-66ef5487865c",
            "policy_ids": [],
            "created_at": 1758521040
          },
          {
            "id": "fa6ee90b-8ad9-43a6-801c-652bd3df4ca0",
            "address": "0x34e50a179c9e497c43b14275413425c80253edd2",
            "chain_type": "EVM",
            "chain_id": "11155111",
            "app_id": "4dba5ccb-5336-42d4-b43a-04b79a2192af",
            "owner_id": "293b0aad-0c46-4667-b4b3-66ef5487865c",
            "policy_ids": [],
            "created_at": 1758521040
          },
          {
            "id": "f4cc144a-9a79-4484-881c-a51cc663218d",
            "address": "2GAV1nXzTjdm6SChzkoscjrNfqTsZYD3ko5ycctdeJpf",
            "chain_type": "SOLANA",
            "chain_id": "devnet",
            "app_id": "4dba5ccb-5336-42d4-b43a-04b79a2192af",
            "owner_id": "293b0aad-0c46-4667-b4b3-66ef5487865c",
            "policy_ids": [],
            "created_at": 1758521040
          },
          {
            "id": "51ee0675-498e-47f0-9c72-8d9b7a491c10",
            "address": "0x30bc78c905609a394b0135e3c2685e8014c812b154cba3a0a571bf7899c5ada",
            "chain_type": "STARKNET",
            "chain_id": "21280703052830640944970871415780893550344133951",
            "app_id": "4dba5ccb-5336-42d4-b43a-04b79a2192af",
            "owner_id": "293b0aad-0c46-4667-b4b3-66ef5487865c",
            "policy_ids": [],
            "created_at": 1758521040
          },
          {
            "id": "8c23dc28-32cf-4ce9-bbbd-6e25f2f2ecb5",
            "address": "0xe3a05d3178ed38c5babb7ad9771b84369ebd89082b5d0392c5a57013ac39d233",
            "chain_type": "SUI",
            "chain_id": "testnet",
            "app_id": "4dba5ccb-5336-42d4-b43a-04b79a2192af",
            "owner_id": "293b0aad-0c46-4667-b4b3-66ef5487865c",
            "policy_ids": [],
            "created_at": 1758521040
          }
        ]
      },
      "CreateWalletRequest": {
        "type": "object",
        "description": "Request body for creating a new wallet",
        "properties": {
          "app_id": {
            "type": "string",
            "description": "Id of the application under which the wallets will be created",
            "example": "a884dbf4-8ee5-40ab-97e3-78daa9dfa66c"
          }
        },
        "required": ["chain_type"]
      },
      "UpdateWalletRequest": {
        "type": "object",
        "description": "Request body for updating a wallet",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags to associate with the wallet",
            "example": ["production", "user-wallet"]
          },
          "policy_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Policy IDs to apply to the wallet",
            "example": ["sb02ad6ed2kah6l32gz1n40e"]
          }
        }
      },
      "Quorum": {
        "type": "object",
        "description": "Key quorum object representing an authorization quorum in the Catalog system",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique key quorum identifier",
            "example": "qsz36nck6u0z28lluuqkin98"
          },
          "display_name": {
            "type": "string",
            "description": "Display name for the key quorum",
            "example": "Dummy Key"
          },
          "authorization_threshold": {
            "type": "integer",
            "description": "Number of signatures required for authorization",
            "example": 1
          },
          "wallets_owned": {
            "type": "integer",
            "description": "Number of wallets owned by this key quorum",
            "example": 0
          },
          "policies_owned": {
            "type": "integer",
            "description": "Number of policies owned by this key quorum",
            "example": 0
          },
          "signer_for": {
            "type": "integer",
            "description": "Number of wallets this key quorum is a signer for",
            "example": 0
          },
          "created_at": {
            "type": "integer",
            "description": "Timestamp when the key quorum was created",
            "example": 1753768526634
          },
          "authorization_keys": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "public_key": {
                  "type": "string",
                  "description": "Public key in PEM format",
                  "example": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEGstDoTK152LGCLUsDYqZ8Lthjo7Q\nseVNOXCM89Ddt5boDlpWAqrT1YZUDr5SCtNC1fx/vC6ExaTUbEcOdEyVHA==\n-----END PUBLIC KEY-----"
                },
                "display_name": {
                  "type": "string",
                  "nullable": true,
                  "description": "Display name for the authorization key"
                }
              },
              "required": ["public_key"]
            },
            "description": "Array of authorization keys in the quorum"
          },
          "user_session_keys": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "User session keys associated with the quorum"
          }
        },
        "required": [
          "id",
          "display_name",
          "authorization_threshold",
          "wallets_owned",
          "policies_owned",
          "signer_for",
          "created_at",
          "authorization_keys",
          "user_session_keys"
        ]
      },
      "CreateQuorumRequest": {
        "type": "object",
        "description": "Request body for creating a new key quorum",
        "properties": {
          "display_name": {
            "type": "string",
            "description": "Display name for the key quorum",
            "example": "Dummy Key"
          },
          "public_keys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of public keys in PEM format",
            "example": [
              "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEGstDoTK152LGCLUsDYqZ8Lthjo7Q\nseVNOXCM89Ddt5boDlpWAqrT1YZUDr5SCtNC1fx/vC6ExaTUbEcOdEyVHA==\n-----END PUBLIC KEY-----"
            ]
          },
          "authorization_threshold": {
            "type": "integer",
            "description": "Number of signatures required for authorization",
            "example": 1
          }
        },
        "required": ["display_name", "public_keys", "authorization_threshold"]
      },
      "UpdateQuorumRequest": {
        "type": "object",
        "description": "Request body for updating a key quorum",
        "properties": {
          "display_name": {
            "type": "string",
            "description": "Display name for the key quorum",
            "example": "Updated Key Name"
          },
          "public_keys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of public keys in PEM format",
            "example": [
              "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEGstDoTK152LGCLUsDYqZ8Lthjo7Q\nseVNOXCM89Ddt5boDlpWAqrT1YZUDr5SCtNC1fx/vC6ExaTUbEcOdEyVHA==\n-----END PUBLIC KEY-----"
            ]
          },
          "authorization_threshold": {
            "type": "integer",
            "description": "Number of signatures required for authorization",
            "example": 2
          }
        }
      },
      "PolicyRule": {
        "type": "object",
        "description": "Policy rule object defining conditions and actions",
        "properties": {
          "name": {
            "type": "string",
            "description": "Rule name",
            "example": "Allowlist USDC contract on Base"
          },
          "method": {
            "type": "string",
            "description": "RPC method to apply rule to",
            "example": "eth_sendTransaction"
          },
          "conditions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "field_source": {
                  "type": "string",
                  "description": "Source of the field to check",
                  "example": "ethereum_transaction"
                },
                "field": {
                  "type": "string",
                  "description": "Field name to check",
                  "example": "to"
                },
                "operator": {
                  "type": "string",
                  "enum": ["eq", "ne", "in", "nin", "gt", "gte", "lt", "lte"],
                  "description": "Comparison operator",
                  "example": "eq"
                },
                "value": {
                  "type": "string",
                  "description": "Value to compare against",
                  "example": "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913"
                }
              },
              "required": ["field_source", "field", "operator", "value"]
            },
            "description": "Array of conditions for the rule"
          },
          "action": {
            "type": "string",
            "enum": ["ALLOW", "DENY"],
            "description": "Action to take if conditions are met",
            "example": "ALLOW"
          }
        },
        "required": ["name", "method", "conditions", "action"]
      },
      "Policy": {
        "type": "object",
        "description": "Policy object representing a wallet policy in the Catalog system",
        "properties": {
          "id": {
            "type": "string",
            "description": "Policy ID",
            "example": "tb54eps4z44ed0jepousxi4n"
          },
          "name": {
            "type": "string",
            "description": "Policy name",
            "example": "Allowlisted stablecoins"
          },
          "chain_type": {
            "type": "string",
            "description": "Type of blockchain",
            "example": "ethereum"
          },
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyRule"
            },
            "description": "Array of policy rules"
          },
          "owner_id": {
            "type": "string",
            "nullable": true,
            "description": "Owner ID",
            "example": null
          },
          "version": {
            "type": "string",
            "description": "Policy version",
            "example": "1.0"
          },
          "created_at": {
            "type": "integer",
            "description": "Creation timestamp",
            "example": 1741833088894
          }
        },
        "required": [
          "id",
          "name",
          "chain_type",
          "rules",
          "version",
          "created_at"
        ]
      },
      "CreatePolicyRequest": {
        "type": "object",
        "description": "Request body for creating a new policy",
        "properties": {
          "version": {
            "type": "string",
            "description": "Policy version",
            "example": "1.0"
          },
          "name": {
            "type": "string",
            "description": "Policy name",
            "example": "Allowlisted stablecoins"
          },
          "chain_type": {
            "type": "string",
            "enum": ["ethereum", "solana"],
            "description": "Type of blockchain",
            "example": "ethereum"
          },
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyRule"
            },
            "description": "Array of policy rules"
          },
          "owner": {
            "type": "object",
            "properties": {
              "public_key": {
                "type": "string",
                "description": "Owner's public key",
                "example": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEGstDoTK152LGCLUsDYqZ8Lthjo7Q\nseVNOXCM89Ddt5boDlpWAqrT1YZUDr5SCtNC1fx/vC6ExaTUbEcOdEyVHA==\n-----END PUBLIC KEY-----"
              }
            }
          },
          "owner_id": {
            "type": "string",
            "description": "Owner ID",
            "example": "user123"
          }
        },
        "required": ["version", "name", "chain_type", "rules"]
      },
      "UpdatePolicyRequest": {
        "type": "object",
        "description": "Request body for updating a policy",
        "properties": {
          "name": {
            "type": "string",
            "description": "Policy name",
            "example": "Updated policy name"
          },
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyRule"
            },
            "description": "Array of policy rules"
          },
          "owner": {
            "type": "object",
            "properties": {
              "public_key": {
                "type": "string",
                "description": "Owner's public key",
                "example": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEGstDoTK152LGCLUsDYqZ8Lthjo7Q\nseVNOXCM89Ddt5boDlpWAqrT1YZUDr5SCtNC1fx/vC6ExaTUbEcOdEyVHA==\n-----END PUBLIC KEY-----"
              }
            }
          },
          "owner_id": {
            "type": "string",
            "description": "Owner ID",
            "example": "user123"
          }
        }
      },
      "PolicyRuleResponse": {
        "type": "object",
        "description": "Policy rule response object with ID and creation timestamp",
        "properties": {
          "id": {
            "type": "string",
            "description": "Rule ID",
            "example": "rule_abc123def456"
          },
          "name": {
            "type": "string",
            "description": "Rule name",
            "example": "Allowlist USDC contract on Base"
          },
          "method": {
            "type": "string",
            "description": "RPC method",
            "example": "eth_sendTransaction"
          },
          "conditions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "field_source": {
                  "type": "string",
                  "description": "Field source",
                  "example": "ethereum_transaction"
                },
                "field": {
                  "type": "string",
                  "description": "Field name",
                  "example": "to"
                },
                "operator": {
                  "type": "string",
                  "description": "Operator",
                  "example": "eq"
                },
                "value": {
                  "type": "string",
                  "description": "Value",
                  "example": "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913"
                }
              },
              "required": ["field_source", "field", "operator", "value"]
            },
            "description": "Array of conditions for the rule"
          },
          "action": {
            "type": "string",
            "description": "Action",
            "example": "ALLOW"
          },
          "created_at": {
            "type": "integer",
            "description": "Creation timestamp",
            "example": 1741833088894
          }
        },
        "required": [
          "id",
          "name",
          "method",
          "conditions",
          "action",
          "created_at"
        ]
      },
      "CreatePolicyRuleRequest": {
        "type": "object",
        "description": "Request body for creating a new policy rule",
        "properties": {
          "name": {
            "type": "string",
            "description": "Rule name",
            "example": "Allowlist USDC contract on Base"
          },
          "method": {
            "type": "string",
            "description": "RPC method to apply rule to",
            "example": "eth_sendTransaction"
          },
          "conditions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "field_source": {
                  "type": "string",
                  "description": "Source of the field to check",
                  "example": "ethereum_transaction"
                },
                "field": {
                  "type": "string",
                  "description": "Field name to check",
                  "example": "to"
                },
                "operator": {
                  "type": "string",
                  "enum": ["eq", "ne", "in", "nin", "gt", "gte", "lt", "lte"],
                  "description": "Comparison operator",
                  "example": "eq"
                },
                "value": {
                  "type": "string",
                  "description": "Value to compare against",
                  "example": "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913"
                }
              },
              "required": ["field_source", "field", "operator", "value"]
            },
            "description": "Array of conditions for the rule"
          },
          "action": {
            "type": "string",
            "enum": ["ALLOW", "DENY"],
            "description": "Action to take if conditions are met",
            "example": "ALLOW"
          }
        },
        "required": ["name", "method", "conditions", "action"]
      },
      "UpdatePolicyRuleRequest": {
        "type": "object",
        "description": "Request body for updating a policy rule",
        "properties": {
          "name": {
            "type": "string",
            "description": "Rule name",
            "example": "Updated rule name"
          },
          "method": {
            "type": "string",
            "description": "RPC method to apply rule to",
            "example": "eth_sendTransaction"
          },
          "conditions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "field_source": {
                  "type": "string",
                  "description": "Source of the field to check",
                  "example": "ethereum_transaction"
                },
                "field": {
                  "type": "string",
                  "description": "Field name to check",
                  "example": "to"
                },
                "operator": {
                  "type": "string",
                  "enum": ["eq", "ne", "in", "nin", "gt", "gte", "lt", "lte"],
                  "description": "Comparison operator",
                  "example": "eq"
                },
                "value": {
                  "type": "string",
                  "description": "Value to compare against",
                  "example": "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913"
                }
              },
              "required": ["field_source", "field", "operator", "value"]
            },
            "description": "Array of conditions for the rule"
          },
          "action": {
            "type": "string",
            "enum": ["ALLOW", "DENY"],
            "description": "Action to take if conditions are met",
            "example": "ALLOW"
          }
        }
      },
      "AllowlistEntry": {
        "type": "object",
        "description": "Allowlist entry object representing a user or domain allowed to access an app",
        "properties": {
          "id": {
            "type": "string",
            "description": "Allowlist entry ID",
            "example": "cmdphxoym01e8ky0jwos5bg2j"
          },
          "type": {
            "type": "string",
            "enum": [
              "email",
              "emailDomain",
              "phoneNumber",
              "ethereumAddress",
              "solanaAddress"
            ],
            "description": "Type of allowlist entry",
            "example": "email"
          },
          "value": {
            "type": "string",
            "description": "Value of the allowlist entry",
            "example": "user@example.com"
          }
        },
        "required": ["id", "type", "value"]
      },
      "CreateAllowlistEntryRequest": {
        "type": "object",
        "description": "Request body for adding a user to the allowlist",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "email",
              "emailDomain",
              "phoneNumber",
              "ethereumAddress",
              "solanaAddress"
            ],
            "description": "The type of account to add to the allowlist",
            "example": "email"
          },
          "value": {
            "type": "string",
            "description": "The identifier of the account to add to the allowlist. Should be the corresponding email address, phone number, or wallet address",
            "example": "user@example.com"
          }
        },
        "required": ["type", "value"]
      },
      "DenylistEntry": {
        "type": "object",
        "description": "Denylist entry object representing a user or domain denied access to an app",
        "properties": {
          "id": {
            "type": "string",
            "description": "Denylist entry ID",
            "example": "cmdphxoym01e8ky0jwos5bg2j"
          },
          "type": {
            "type": "string",
            "enum": [
              "email",
              "emailDomain",
              "phoneNumber",
              "ethereumAddress",
              "solanaAddress"
            ],
            "description": "Type of denylist entry",
            "example": "email"
          },
          "value": {
            "type": "string",
            "description": "Value of the denylist entry",
            "example": "user@example.com"
          }
        },
        "required": ["id", "type", "value"]
      },
      "CreateDenylistEntryRequest": {
        "type": "object",
        "description": "Request body for adding a user to the denylist",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "email",
              "emailDomain",
              "phoneNumber",
              "ethereumAddress",
              "solanaAddress"
            ],
            "description": "Specifies that the request adds an email address, email domain, phone number, EVM wallet address or Solana wallet address to the denylist",
            "example": "email"
          },
          "value": {
            "type": "string",
            "description": "The identifier of the account to add to the denylist. Should be the corresponding email address, phone number, or wallet address",
            "example": "user@example.com"
          }
        },
        "required": ["type", "value"]
      },
      "DenylistResponse": {
        "type": "object",
        "description": "Paginated response for denylist entries",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DenylistEntry"
            },
            "description": "Array of denylist entries"
          },
          "next_cursor": {
            "type": "string",
            "description": "Cursor for pagination",
            "example": "cmdphxoym01e8ky0jwos5bg2j"
          }
        },
        "required": ["data", "next_cursor"]
      },
      "MFAConfiguration": {
        "type": "object",
        "description": "Multi-Factor Authentication configuration object for an app",
        "properties": {
          "id": {
            "type": "string",
            "description": "MFA configuration ID",
            "example": "cmdh1h9cg01dyjg0mu3v9libp"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether MFA is enabled for the app",
            "example": true
          },
          "sms_enabled": {
            "type": "boolean",
            "description": "Whether SMS-based MFA is enabled",
            "example": false
          },
          "totp_enabled": {
            "type": "boolean",
            "description": "Whether TOTP-based MFA is enabled",
            "example": true
          },
          "passkey_enabled": {
            "type": "boolean",
            "description": "Whether passkey-based MFA is enabled",
            "example": false
          },
          "expiry_window": {
            "type": "integer",
            "description": "MFA token expiry window in minutes",
            "example": 15
          },
          "updated_at": {
            "type": "integer",
            "description": "Timestamp when MFA configuration was last updated",
            "example": 1753340190
          },
          "created_at": {
            "type": "integer",
            "description": "Timestamp when MFA configuration was created",
            "example": 1753340190
          }
        },
        "required": [
          "id",
          "enabled",
          "sms_enabled",
          "totp_enabled",
          "passkey_enabled",
          "expiry_window",
          "updated_at",
          "created_at"
        ]
      },
      "UpdateMFAConfigurationRequest": {
        "type": "object",
        "description": "Request body for updating MFA configuration",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Whether to enable MFA for the app",
            "example": true
          },
          "sms_enabled": {
            "type": "boolean",
            "description": "Whether to enable SMS-based MFA",
            "example": false
          },
          "totp_enabled": {
            "type": "boolean",
            "description": "Whether to enable TOTP-based MFA",
            "example": true
          },
          "passkey_enabled": {
            "type": "boolean",
            "description": "Whether to enable passkey-based MFA",
            "example": true
          },
          "expiry_window": {
            "type": "integer",
            "description": "MFA token expiry window in minutes",
            "example": 15
          }
        }
      },
      "SessionConfiguration": {
        "type": "object",
        "description": "Session and token lifetime configuration object for an app",
        "properties": {
          "sessionTimeoutMinutes": {
            "type": "integer",
            "description": "Session timeout in minutes",
            "example": 57600
          },
          "sessionInactivityWindowMinutes": {
            "type": "integer",
            "nullable": true,
            "description": "Session inactivity window in minutes",
            "example": null
          },
          "accessTokenLifetimeMinutes": {
            "type": "integer",
            "description": "Access token lifetime in minutes",
            "example": 10
          },
          "idTokenLifetimeMinutes": {
            "type": "integer",
            "nullable": true,
            "description": "ID token lifetime in minutes",
            "example": null
          }
        },
        "required": ["sessionTimeoutMinutes", "accessTokenLifetimeMinutes"]
      },
      "UpdateSessionConfigurationRequest": {
        "type": "object",
        "description": "Request body for updating session configuration",
        "properties": {
          "session_timeout_minutes": {
            "type": "integer",
            "description": "Session timeout in minutes (Used in: app/authentication/advanced)",
            "example": 57600
          },
          "session_inactivity_window_minutes": {
            "type": "integer",
            "nullable": true,
            "description": "Session inactivity window in minutes (Used in: app/authentication/advanced)",
            "example": null
          },
          "access_token_lifetime_minutes": {
            "type": "integer",
            "description": "Access token lifetime in minutes (Used in: app/authentication/advanced)",
            "example": 10
          },
          "id_token_lifetime_minutes": {
            "type": "integer",
            "nullable": true,
            "description": "ID token lifetime in minutes (Used in: app/authentication/advanced)",
            "example": null
          }
        }
      },
      "TestCredential": {
        "type": "object",
        "description": "Test credential object for development and testing purposes",
        "properties": {
          "id": {
            "type": "string",
            "description": "Test credential ID",
            "example": "cmdcweb58007mju0ngl12wedu"
          },
          "email": {
            "type": "string",
            "description": "Test email address",
            "example": "test-3352@privy.io"
          },
          "otp_code": {
            "type": "string",
            "description": "One-time password code for testing",
            "example": "243838"
          },
          "phone_number": {
            "type": "string",
            "description": "Test phone number",
            "example": "+1 555 555 4770"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the test credential was created",
            "example": "2025-07-21T09:23:09.932Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the test credential was last updated",
            "example": "2025-07-21T09:23:09.932Z"
          }
        },
        "required": [
          "id",
          "email",
          "otp_code",
          "phone_number",
          "created_at",
          "updated_at"
        ]
      },
      "TestCredentialsResponse": {
        "type": "object",
        "description": "Response object containing test credentials and primary values",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TestCredential"
            },
            "description": "Array of test credentials"
          },
          "email": {
            "type": "string",
            "description": "Primary test email address",
            "example": "test-3352@privy.io"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Primary test phone number",
            "example": "+1 555 555 4770"
          },
          "otpCode": {
            "type": "string",
            "description": "Primary OTP code for testing",
            "example": "243838"
          }
        },
        "required": ["data", "email", "phoneNumber", "otpCode"]
      },
      "OAuthConfig": {
        "type": "object",
        "description": "OAuth provider configuration object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "google",
              "apple",
              "twitter",
              "discord",
              "github",
              "tiktok",
              "line",
              "linkedin",
              "spotify",
              "instagram"
            ],
            "description": "OAuth provider name",
            "example": "google"
          },
          "client_id": {
            "type": "string",
            "description": "OAuth client ID",
            "example": "1234567890-abcdefghijklmnopqrstuvwxyz.apps.googleusercontent.com"
          },
          "client_secret": {
            "type": "string",
            "description": "OAuth client secret (masked in response)",
            "example": "*****************9jkl"
          },
          "return_oauth_tokens": {
            "type": "boolean",
            "description": "Whether to return OAuth tokens",
            "example": true
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "OAuth scopes",
            "example": ["email"]
          }
        },
        "required": ["provider", "client_id", "client_secret"]
      },
      "OAuthConfiguration": {
        "type": "object",
        "description": "OAuth configuration response object",
        "properties": {
          "editable": {
            "type": "boolean",
            "description": "Whether the OAuth configuration is editable",
            "example": true
          },
          "config": {
            "$ref": "#/components/schemas/OAuthConfig",
            "description": "OAuth provider configuration"
          }
        },
        "required": ["editable", "config"]
      },
      "ConfigureOAuthProviderRequest": {
        "type": "object",
        "description": "Request body for configuring OAuth provider",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/OAuthConfig",
            "description": "OAuth provider configuration"
          }
        },
        "required": ["config"]
      },
      "AppListItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the app",
            "example": "cmdgxr3b100sfjx0lejx6wldn"
          },
          "created_at": {
            "type": "integer",
            "description": "Timestamp when the app was created",
            "example": 1753333930
          },
          "updated_at": {
            "type": "integer",
            "description": "Timestamp when the app was last updated",
            "example": 1753333930
          },
          "name": {
            "type": "string",
            "description": "Name of the application",
            "example": "Hashira"
          },
          "logo_url": {
            "type": "string",
            "nullable": true,
            "description": "URL of the app logo",
            "example": null
          },
          "env": {
            "type": "string",
            "description": "Environment of the app",
            "example": "dev"
          },
          "usersCount": {
            "type": "integer",
            "description": "Number of users in the app",
            "example": -1
          },
          "development_apps": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Development apps associated with this app"
          },
          "production_app": {
            "type": "object",
            "nullable": true,
            "description": "Production app associated with this app",
            "example": null
          }
        }
      },
      "SendOTPRequest": {
        "type": "object",
        "description": "Request body for sending OTP",
        "properties": {
          "email": {
            "type": "string",
            "example": "useremail@domain.com"
          }
        },
        "required": ["email"]
      },
      "SendOTPResponse": {
        "type": "object",
        "description": "Response for sending OTP",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "SendOTPErrorResponse": {
        "type": "object",
        "description": "Error response for sending OTP",
        "properties": {
          "error": {
            "type": "string",
            "example": "Invalid email"
          }
        }
      },
      "SendOTPRateLimitResponse": {
        "type": "object",
        "description": "Rate limit response for sending OTP",
        "properties": {
          "error": {
            "type": "string",
            "example": "Too many OTP requests. Please try again later."
          },
          "retry_after": {
            "type": "integer",
            "description": "Number of seconds to wait before retrying",
            "example": 60
          },
          "rate_limit_reset": {
            "type": "string",
            "format": "date-time",
            "description": "When the rate limit will reset",
            "example": "2025-01-14T12:00:00Z"
          }
        }
      },
      "VerifyOTPRequest": {
        "type": "object",
        "description": "Request body for verifying OTP",
        "properties": {
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "code": {
            "type": "string",
            "description": "6-digit OTP code",
            "example": "123456"
          },
          "mode": {
            "type": "string",
            "enum": ["login-or-sign-up"],
            "example": "login-or-sign-up"
          }
        },
        "required": ["email", "code", "mode"]
      },
      "VerifyOTPResponse": {
        "type": "object",
        "description": "Response for successful OTP verification",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "token": {
            "type": "string",
            "description": "JWT token for authentication"
          },
          "catalog_access_token": {
            "type": "string",
            "description": "catalog access token"
          },
          "refresh_token": {
            "type": "string",
            "description": "Refresh token for token renewal"
          },
          "session_update_action": {
            "type": "string",
            "example": "set"
          },
          "is_new_user": {
            "type": "boolean",
            "description": "Whether this is a new user registration",
            "example": false
          }
        }
      },
      "VerifyOTPErrorResponse": {
        "type": "object",
        "description": "Error response for OTP verification",
        "properties": {
          "error": {
            "type": "string",
            "example": "Code is expired"
          },
          "code": {
            "type": "string",
            "example": "invalid_data"
          }
        }
      },
      "VerifyOTPRateLimitResponse": {
        "type": "object",
        "description": "Rate limit response for OTP verification",
        "properties": {
          "error": {
            "type": "string",
            "example": "Too many authentication attempts. Please try again later."
          },
          "retry_after": {
            "type": "integer",
            "description": "Number of seconds to wait before retrying",
            "example": 60
          }
        }
      },
      "RefreshSessionRequest": {
        "type": "object",
        "description": "Request body for refreshing session",
        "properties": {
          "refresh_token": {
            "type": "string",
            "description": "Refresh token for session renewal",
            "example": "ncqbUutBJFEjL--XkzdvaYeF6f-LCSr-Wm9toyj3AhoaEOwGKQl2qMPJzItQWMA_ZXsOesAjSdYp49YvjcVPWg"
          }
        },
        "required": ["refresh_token"]
      },
      "RefreshSessionResponse": {
        "type": "object",
        "description": "Response for successful session refresh",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "token": {
            "type": "string",
            "description": "New JWT token for authentication"
          },
          "catalog_access_token": {
            "type": "string",
            "description": "New catalog access token"
          },
          "refresh_token": {
            "type": "string",
            "description": "New refresh token for future renewals"
          },
          "session_update_action": {
            "type": "string",
            "example": "ignore"
          }
        }
      },
      "AppUserCountResponse": {
        "type": "object",
        "description": "Response for app user count",
        "properties": {
          "user_count": {
            "type": "integer",
            "description": "Current number of users in the app",
            "example": 0
          },
          "user_limit": {
            "type": "integer",
            "description": "Maximum number of users allowed for the app",
            "example": 150
          }
        }
      },
      "AppSecretItem": {
        "type": "object",
        "description": "Individual app secret item",
        "properties": {
          "id": {
            "type": "string",
            "description": "Secret/client ID",
            "example": "dqwbst7cm3x90f46b7ax1yjj"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the secret was created",
            "example": "2025-07-14T12:05:29.788Z"
          },
          "last_four": {
            "type": "string",
            "description": "Last four characters of the secret",
            "example": "KCVQ"
          }
        }
      },
      "AppSecretsResponse": {
        "type": "object",
        "description": "Response for app secrets",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppSecretItem"
            }
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "description": "Generic error response",
        "properties": {
          "error": {
            "type": "string",
            "example": "Unauthorized"
          }
        }
      },
      "ForbiddenResponse": {
        "type": "object",
        "description": "Forbidden error response",
        "properties": {
          "error": {
            "type": "string",
            "example": "Access denied"
          }
        }
      },
      "NotFoundResponse": {
        "type": "object",
        "description": "Not found error response",
        "properties": {
          "error": {
            "type": "string",
            "example": "App not found"
          },
          "code": {
            "type": "string",
            "example": "missing_or_invalid_catalog_app_id"
          }
        }
      },
      "WalletErrorResponse": {
        "type": "object",
        "description": "Standard wallet error response",
        "properties": {
          "status": {
            "type": "integer",
            "description": "HTTP status code",
            "example": 400
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Invalid Input: wallet_id - Invalid UUID format"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Error timestamp",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "required": ["status", "message", "timestamp"]
      },
      "WalletValidationErrorResponse": {
        "type": "object",
        "description": "Wallet validation error response",
        "properties": {
          "status": {
            "type": "integer",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "Invalid request: At least one filter parameter out of account_id, app_id or owner_id is required"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["status", "message", "timestamp"]
      },
      "WalletCreationErrorResponse": {
        "type": "object",
        "description": "Wallet creation error response",
        "properties": {
          "status": {
            "type": "integer",
            "example": 500
          },
          "message": {
            "type": "string",
            "example": "Failed to create wallet: [reason]"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["status", "message", "timestamp"]
      },
      "WalletLoadErrorResponse": {
        "type": "object",
        "description": "Wallet loading error response",
        "properties": {
          "status": {
            "type": "integer",
            "example": 500
          },
          "message": {
            "type": "string",
            "example": "Failed to load wallet: [reason]"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["status", "message", "timestamp"]
      },
      "WalletBalanceErrorResponse": {
        "type": "object",
        "description": "Wallet balance retrieval error response",
        "properties": {
          "status": {
            "type": "integer",
            "example": 500
          },
          "message": {
            "type": "string",
            "example": "Failed to get balance: [reason]"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["status", "message", "timestamp"]
      },
      "WalletTransactionErrorResponse": {
        "type": "object",
        "description": "Wallet transaction error response",
        "properties": {
          "status": {
            "type": "integer",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "Transaction failed: [reason]"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["status", "message", "timestamp"]
      },
      "WalletAmountErrorResponse": {
        "type": "object",
        "description": "Wallet amount validation error response",
        "properties": {
          "status": {
            "type": "integer",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "Invalid amount format: [amount]"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["status", "message", "timestamp"]
      },
      "WalletTokenIdErrorResponse": {
        "type": "object",
        "description": "Wallet token ID required error response",
        "properties": {
          "status": {
            "type": "integer",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "Token ID required for Starknet transactions"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["status", "message", "timestamp"]
      },
      "WalletSaveTransactionErrorResponse": {
        "type": "object",
        "description": "Wallet transaction save error response",
        "properties": {
          "status": {
            "type": "integer",
            "example": 500
          },
          "message": {
            "type": "string",
            "example": "Failed to save transaction: [reason]"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["status", "message", "timestamp"]
      },
      "WalletInsufficientBalanceErrorResponse": {
        "type": "object",
        "description": "Wallet insufficient balance error response",
        "properties": {
          "status": {
            "type": "integer",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "Insufficient balance for transaction"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["status", "message", "timestamp"]
      },
      "WalletInvalidAddressErrorResponse": {
        "type": "object",
        "description": "Wallet invalid address error response",
        "properties": {
          "status": {
            "type": "integer",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "Invalid wallet address: [address]"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["status", "message", "timestamp"]
      },
      "WalletUnsupportedChainErrorResponse": {
        "type": "object",
        "description": "Wallet unsupported chain type error response",
        "properties": {
          "status": {
            "type": "integer",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "Unsupported chain type: [chain_type]"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["status", "message", "timestamp"]
      },
      "CNAMERecord": {
        "type": "object",
        "description": "CNAME record configuration",
        "properties": {
          "status": {
            "type": "string",
            "description": "CNAME record status",
            "example": "pending"
          },
          "type": {
            "type": "string",
            "description": "DNS record type",
            "example": "CNAME"
          },
          "name": {
            "type": "string",
            "description": "DNS record name",
            "example": "privy"
          },
          "value": {
            "type": "string",
            "description": "DNS record value",
            "example": "cmcx1p0y50315i80ldhmlcnmm.api.catalog.fi.systems"
          }
        }
      },
      "AppDomainConfiguration": {
        "type": "object",
        "description": "App domain configuration response",
        "properties": {
          "status": {
            "type": "string",
            "description": "Domain configuration status",
            "example": "pending"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether domain configuration is enabled",
            "example": true
          },
          "base_cookie_domain": {
            "type": "string",
            "description": "Base cookie domain",
            "example": "hashira.io"
          },
          "cookie_same_site_lax": {
            "type": "boolean",
            "description": "Whether to use SameSite=Lax for cookies",
            "example": false
          },
          "custom_api_url": {
            "type": "string",
            "nullable": true,
            "description": "Custom API URL",
            "example": null
          },
          "cname_record": {
            "$ref": "#/components/schemas/CNAMERecord"
          }
        }
      },
      "UpdateAppDomainRequest": {
        "type": "object",
        "description": "Request body for updating app domain configuration",
        "properties": {
          "cookie_domain": {
            "type": "string",
            "description": "Cookie domain to configure",
            "example": "hashira.io"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to enable domain configuration",
            "example": false
          },
          "cookie_same_site_lax": {
            "type": "boolean",
            "description": "Whether to use SameSite=Lax for cookies",
            "example": false
          }
        },
        "required": ["cookie_domain", "enabled", "cookie_same_site_lax"]
      },
      "AccountAdmin": {
        "type": "object",
        "description": "Account admin information",
        "properties": {
          "id": {
            "type": "string",
            "example": "cmcvhzuqq03a4jp0nh1tq1050"
          },
          "created_at": {
            "type": "integer",
            "example": 1752037675
          },
          "role": {
            "type": "string",
            "example": "admin"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "Account": {
        "type": "object",
        "description": "Account information",
        "properties": {
          "id": {
            "type": "string",
            "example": "cmcvhzuqq03a3jp0ngx86i7ce"
          },
          "name": {
            "type": "string",
            "example": "Hashira"
          },
          "admins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountAdmin"
            }
          },
          "invitedAdmins": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "customJwtAccountEnabled": {
            "type": "boolean",
            "example": false
          },
          "fiatOnRampEnabled": {
            "type": "boolean",
            "example": false
          },
          "transactionMfaControlsEnabled": {
            "type": "boolean",
            "example": true
          },
          "expoSDKEnabled": {
            "type": "boolean",
            "example": false
          },
          "delegatedActionsEnabled": {
            "type": "boolean",
            "example": false
          },
          "walletApiEnabled": {
            "type": "boolean",
            "example": true
          },
          "telegramAuthEnabled": {
            "type": "boolean",
            "example": true
          },
          "webhooksEnabled": {
            "type": "boolean",
            "example": false
          },
          "twilioAccountType": {
            "type": "string",
            "example": "basic"
          },
          "apps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppListItem"
            }
          },
          "created_at": {
            "type": "integer",
            "example": 1752037675
          },
          "updated_at": {
            "type": "integer",
            "example": 1752037675
          }
        }
      },
      "AccountsResponse": {
        "type": "object",
        "description": "Response for user accounts",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Account"
            }
          }
        }
      },
      "CreateAppRateLimitResponse": {
        "type": "object",
        "description": "Rate limit response for app creation",
        "properties": {
          "error": {
            "type": "string",
            "example": "Too many app creation requests. Please try again later."
          },
          "retry_after": {
            "type": "integer",
            "description": "Number of seconds to wait before retrying",
            "example": 60
          }
        }
      },
      "AccountNotFoundResponse": {
        "type": "object",
        "description": "Account not found error response",
        "properties": {
          "error": {
            "type": "string",
            "example": "Account not found"
          }
        }
      },
      "AppClientsResponse": {
        "type": "object",
        "description": "Response for app clients list",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppClient"
            }
          }
        }
      },
      "URLRestrictionRequest": {
        "type": "object",
        "description": "Request body for updating URL restrictions",
        "properties": {
          "allowed_oauth_redirect_urls": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Allowed OAuth redirect URLs for the app",
            "example": ["https://hashira.io/redirect"]
          }
        },
        "required": ["allowed_oauth_redirect_urls"]
      },
      "URLRestrictionResponse": {
        "type": "object",
        "description": "Response for URL restrictions",
        "properties": {
          "allowed_oauth_redirect_urls": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Allowed OAuth redirect URLs for the app",
            "example": ["https://hashira.io/redirect"]
          }
        }
      },
      "ClientNotFoundResponse": {
        "type": "object",
        "description": "Client not found error response",
        "properties": {
          "error": {
            "type": "string",
            "example": "App or client not found"
          },
          "code": {
            "type": "string",
            "example": "missing_or_invalid_catalog_app_id"
          }
        }
      },
      "WalletsResponse": {
        "type": "object",
        "description": "Response for wallets list",
        "properties": {
          "wallets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Wallet"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of wallets",
            "example": 150
          },
          "has_more": {
            "type": "boolean",
            "description": "Whether there are more wallets to fetch",
            "example": true
          }
        }
      },
      "CreateWalletRateLimitResponse": {
        "type": "object",
        "description": "Rate limit response for wallet creation",
        "properties": {
          "error": {
            "type": "string",
            "example": "Too many wallet creation requests. Please try again later."
          },
          "retry_after": {
            "type": "integer",
            "description": "Number of seconds to wait before retrying",
            "example": 60
          }
        }
      },
      "ExportWalletRequest": {
        "type": "object",
        "description": "Request body for exporting wallet",
        "properties": {
          "password": {
            "type": "string",
            "description": "Password to encrypt the exported wallet data",
            "example": "secure-password-123"
          },
          "format": {
            "type": "string",
            "enum": ["json", "keystore"],
            "description": "Export format",
            "example": "json"
          }
        },
        "required": ["password"]
      },
      "ExportWalletResponse": {
        "type": "object",
        "description": "Response for wallet export",
        "properties": {
          "wallet_data": {
            "type": "string",
            "description": "Encrypted wallet data",
            "example": "encrypted-wallet-data-here"
          },
          "format": {
            "type": "string",
            "description": "Export format used",
            "example": "json"
          },
          "exported_at": {
            "type": "integer",
            "description": "Timestamp when the wallet was exported",
            "example": 1753766031400
          }
        }
      },
      "WalletBalanceResponse": {
        "type": "object",
        "description": "Response for wallet balance",
        "properties": {
          "chain": {
            "type": "string",
            "description": "Chain type identifier",
            "example": "EVM"
          },
          "chain_id": {
            "type": "string",
            "nullable": true,
            "description": "Chain identifier",
            "example": "11155111"
          },
          "address": {
            "type": "string",
            "description": "Wallet address on the blockchain",
            "example": "0x287eab862f8fda704a760485da302dc0ee38fbb864969d37041aa9131337464"
          },
          "balance": {
            "type": "string",
            "description": "Wallet balance in smallest unit",
            "example": "4899597513893689"
          },
          "unit": {
            "type": "string",
            "description": "Unit of the balance",
            "example": "WEI"
          },
          "unconfirmed_balance": {
            "type": "string",
            "nullable": true,
            "description": "Unconfirmed balance (only populated for Bitcoin)",
            "example": null
          }
        },
        "required": [
          "chain",
          "chain_id",
          "address",
          "balance",
          "unit",
          "unconfirmed_balance"
        ]
      },
      "Transaction": {
        "type": "object",
        "description": "Transaction object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique transaction identifier",
            "example": "5ebae608-8f0d-4d53-bd8c-236271a464ff"
          },
          "wallet_id": {
            "type": "string",
            "format": "uuid",
            "description": "Wallet identifier",
            "example": "a884dbf4-8ee5-40ab-97e3-78daa9dfa66c"
          },
          "network": {
            "type": "string",
            "description": "Network name",
            "example": "Testnet"
          },
          "recipient": {
            "type": "string",
            "description": "Recipient address",
            "example": "0x1ed419492279cf08b558326c2e66eae03be20d47"
          },
          "amount": {
            "type": "string",
            "description": "Transaction amount in smallest unit",
            "example": "100000000000000"
          },
          "chain_type": {
            "type": "string",
            "description": "Chain type identifier",
            "example": "EVM"
          },
          "chain_id": {
            "type": "string",
            "nullable": true,
            "description": "Chain identifier",
            "example": "11155111"
          },
          "tx_id": {
            "type": "string",
            "nullable": true,
            "description": "Transaction hash on the blockchain",
            "example": "0x74cba0f0ef45f8fc63a60bd081f45b27581e7e45dab37ba9a56156ccf55023be"
          },
          "created_at": {
            "type": "integer",
            "description": "Timestamp when the transaction was created",
            "example": 1757933283
          }
        }
      },
      "ContractTransaction": {
        "type": "object",
        "description": "Contract call (ERC-20 or similar) transaction object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique transaction identifier",
            "example": "aaaae5e0-56d4-42b9-8b93-95c9a9bca420"
          },
          "wallet_id": {
            "type": "string",
            "format": "uuid",
            "description": "Wallet identifier",
            "example": "fa6ee90b-8ad9-43a6-801c-652bd3df4ca0"
          },
          "chain_type": {
            "type": "string",
            "description": "Chain type identifier",
            "example": "EVM"
          },
          "chain_id": {
            "type": "string",
            "description": "Chain identifier",
            "example": "11155111"
          },
          "network": {
            "type": "string",
            "description": "Network name",
            "example": "Testnet"
          },
          "contract_address": {
            "type": "string",
            "description": "Contract address",
            "example": "0xE918A5a47b8e0AFAC2382bC5D1e981613e63fB07"
          },
          "method": {
            "type": "string",
            "description": "Contract method invoked",
            "example": "approve"
          },
          "params": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Parameters passed to the contract method",
            "example": ["0xcA2b82Da750267D7631173105f61708206E290b5", "1000"]
          },
          "tx_id": {
            "type": "string",
            "description": "Transaction hash on the blockchain",
            "example": "0x68d7ff1c5ec2bc2f34114ed0229776442b27ba2e24cb410034a8ad9679d6b894"
          },
          "created_at": {
            "type": "integer",
            "description": "Timestamp when the transaction was created",
            "example": 1758607015
          }
        }
      },
      "TransactionsResponse": {
        "type": "object",
        "description": "Combined response containing wallet transfers and contract calls",
        "properties": {
          "contract": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ContractTransaction" }
          },
          "wallet": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Transaction" }
          }
        }
      },
      "WalletNotFoundResponse": {
        "type": "object",
        "description": "Wallet not found error response",
        "properties": {
          "error": {
            "type": "string",
            "example": "Wallet not found"
          }
        }
      },
      "PersonalSignParams": {
        "type": "object",
        "description": "Parameters for personal_sign method",
        "properties": {
          "message": {
            "type": "string",
            "description": "Message to sign",
            "example": "Hello from Privy!"
          },
          "encoding": {
            "type": "string",
            "enum": ["utf-8", "hex"],
            "description": "Message encoding",
            "example": "utf-8"
          }
        },
        "required": ["message", "encoding"]
      },
      "PersonalSignRequest": {
        "type": "object",
        "description": "Request for personal_sign method",
        "properties": {
          "method": {
            "type": "string",
            "enum": ["personal_sign"],
            "description": "RPC method for message signing",
            "example": "personal_sign"
          },
          "params": {
            "$ref": "#/components/schemas/PersonalSignParams"
          }
        },
        "required": ["method", "params"]
      },
      "EthereumTransaction": {
        "type": "object",
        "description": "Ethereum transaction object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Sender address (optional)",
            "example": "0x226d2AeCE1a29d84FD133aEAa1584BaE853CF02D"
          },
          "to": {
            "type": "string",
            "description": "Recipient address",
            "example": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045"
          },
          "chain_id": {
            "type": "string",
            "description": "Chain ID (optional)",
            "example": "11155111"
          },
          "nonce": {
            "type": "string",
            "description": "Transaction nonce (optional)",
            "example": "0"
          },
          "data": {
            "type": "string",
            "description": "Transaction data (optional)",
            "example": "0x"
          },
          "value": {
            "type": "string",
            "description": "Transaction value in wei as hexadecimal string",
            "example": "0x2386F26FC10000"
          },
          "type": {
            "type": "number",
            "enum": [0, 1, 2],
            "description": "Transaction type (optional)",
            "example": 2
          },
          "gas_limit": {
            "type": "string",
            "description": "Gas limit (optional)",
            "example": "21000"
          },
          "gas_price": {
            "type": "string",
            "description": "Gas price in wei (optional)",
            "example": "20000000000"
          },
          "address": {
            "type": "string",
            "description": "Contract address (optional)",
            "example": "0x..."
          }
        },
        "required": ["to", "value"]
      },
      "EthSendTransactionParams": {
        "type": "object",
        "description": "Parameters for eth_sendTransaction method",
        "properties": {
          "transaction": {
            "$ref": "#/components/schemas/EthereumTransaction"
          }
        },
        "required": ["transaction"]
      },
      "EthSendTransactionRequest": {
        "type": "object",
        "description": "Request for eth_sendTransaction method",
        "properties": {
          "method": {
            "type": "string",
            "enum": ["eth_sendTransaction"],
            "description": "RPC method for sending transactions",
            "example": "eth_sendTransaction"
          },
          "caip2": {
            "type": "string",
            "description": "Chain identifier in CAIP-2 format",
            "example": "eip155:11155111"
          },
          "chain_type": {
            "type": "string",
            "enum": ["ethereum"],
            "description": "Type of blockchain",
            "example": "ethereum"
          },
          "params": {
            "$ref": "#/components/schemas/EthSendTransactionParams"
          }
        },
        "required": ["method", "caip2", "chain_type", "params"]
      },
      "EthSignTransactionParams": {
        "type": "object",
        "description": "Parameters for eth_signTransaction method",
        "properties": {
          "transaction": {
            "type": "object",
            "properties": {
              "from": {
                "type": "string",
                "description": "Sender address",
                "example": "0x226d2AeCE1a29d84FD133aEAa1584BaE853CF02D"
              },
              "to": {
                "type": "string",
                "description": "Recipient address",
                "example": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045"
              },
              "chain_id": {
                "type": "string",
                "description": "Chain ID",
                "example": "11155111"
              },
              "nonce": {
                "type": "string",
                "description": "Transaction nonce",
                "example": "0"
              },
              "data": {
                "type": "string",
                "description": "Transaction data",
                "example": "0x"
              },
              "value": {
                "type": "string",
                "description": "Transaction value in wei as hexadecimal string",
                "example": "0x2386F26FC10000"
              },
              "type": {
                "type": "number",
                "enum": [0, 1, 2],
                "description": "Transaction type",
                "example": 2
              },
              "gas_limit": {
                "type": "string",
                "description": "Gas limit",
                "example": "21000"
              },
              "gas_price": {
                "type": "string",
                "description": "Gas price in wei",
                "example": "20000000000"
              }
            },
            "required": [
              "from",
              "to",
              "chain_id",
              "nonce",
              "data",
              "value",
              "type",
              "gas_limit",
              "gas_price"
            ]
          }
        },
        "required": ["transaction"]
      },
      "EthSignTransactionRequest": {
        "type": "object",
        "description": "Request for eth_signTransaction method",
        "properties": {
          "method": {
            "type": "string",
            "enum": ["eth_signTransaction"],
            "description": "RPC method for signing transactions without sending",
            "example": "eth_signTransaction"
          },
          "params": {
            "$ref": "#/components/schemas/EthSignTransactionParams"
          }
        },
        "required": ["method", "params"]
      },
      "TypedData": {
        "type": "object",
        "description": "EIP-712 typed data structure",
        "properties": {
          "types": {
            "type": "object",
            "description": "Type definitions"
          },
          "primaryType": {
            "type": "string",
            "description": "Primary type to sign",
            "example": "Person"
          },
          "domain": {
            "type": "object",
            "description": "Domain separator"
          },
          "message": {
            "type": "object",
            "description": "Message data to sign"
          }
        },
        "required": ["types", "primaryType", "domain", "message"]
      },
      "EthSignTypedDataParams": {
        "type": "object",
        "description": "Parameters for eth_signTypedData_v4 method",
        "properties": {
          "address": {
            "type": "string",
            "description": "Address to sign with",
            "example": "0x226d2AeCE1a29d84FD133aEAa1584BaE853CF02D"
          },
          "typedData": {
            "$ref": "#/components/schemas/TypedData"
          }
        },
        "required": ["address", "typedData"]
      },
      "EthSignTypedDataRequest": {
        "type": "object",
        "description": "Request for eth_signTypedData_v4 method",
        "properties": {
          "method": {
            "type": "string",
            "enum": ["eth_signTypedData_v4"],
            "description": "RPC method for signing typed data (EIP-712)",
            "example": "eth_signTypedData_v4"
          },
          "params": {
            "$ref": "#/components/schemas/EthSignTypedDataParams"
          }
        },
        "required": ["method", "params"]
      },
      "Authorization7702": {
        "type": "object",
        "description": "7702 authorization data",
        "properties": {
          "authority": {
            "type": "string",
            "description": "Authority address",
            "example": "0x..."
          },
          "nonce": {
            "type": "string",
            "description": "Authorization nonce",
            "example": "0x..."
          },
          "validUntil": {
            "type": "string",
            "description": "Valid until timestamp",
            "example": "0x..."
          }
        },
        "required": ["authority", "nonce", "validUntil"]
      },
      "EthSign7702AuthorizationParams": {
        "type": "object",
        "description": "Parameters for eth_sign7702Authorization method",
        "properties": {
          "address": {
            "type": "string",
            "description": "Address to sign with",
            "example": "0x226d2AeCE1a29d84FD133aEAa1584BaE853CF02D"
          },
          "authorization": {
            "$ref": "#/components/schemas/Authorization7702"
          }
        },
        "required": ["address", "authorization"]
      },
      "EthSign7702AuthorizationRequest": {
        "type": "object",
        "description": "Request for eth_sign7702Authorization method",
        "properties": {
          "method": {
            "type": "string",
            "enum": ["eth_sign7702Authorization"],
            "description": "RPC method for signing 7702 authorization",
            "example": "eth_sign7702Authorization"
          },
          "params": {
            "$ref": "#/components/schemas/EthSign7702AuthorizationParams"
          }
        },
        "required": ["method", "params"]
      },
      "Secp256k1SignParams": {
        "type": "object",
        "description": "Parameters for secp256k1_sign method",
        "properties": {
          "message": {
            "type": "string",
            "description": "Message to sign",
            "example": "0x..."
          },
          "encoding": {
            "type": "string",
            "enum": ["hex"],
            "description": "Message encoding",
            "example": "hex"
          }
        },
        "required": ["message", "encoding"]
      },
      "Secp256k1SignRequest": {
        "type": "object",
        "description": "Request for secp256k1_sign method",
        "properties": {
          "method": {
            "type": "string",
            "enum": ["secp256k1_sign"],
            "description": "RPC method for secp256k1 signing",
            "example": "secp256k1_sign"
          },
          "params": {
            "$ref": "#/components/schemas/Secp256k1SignParams"
          }
        },
        "required": ["method", "params"]
      },
      "SignMessageParams": {
        "type": "object",
        "description": "Parameters for signMessage method",
        "properties": {
          "message": {
            "type": "string",
            "description": "Base64 encoded message to sign",
            "example": "aGVsbG8sIFByaXZ5IQ="
          },
          "encoding": {
            "type": "string",
            "enum": ["base64"],
            "description": "Message encoding",
            "example": "base64"
          }
        },
        "required": ["message", "encoding"]
      },
      "SignMessageRequest": {
        "type": "object",
        "description": "Request for signMessage method",
        "properties": {
          "method": {
            "type": "string",
            "enum": ["signMessage"],
            "description": "RPC method for signing Solana messages",
            "example": "signMessage"
          },
          "params": {
            "$ref": "#/components/schemas/SignMessageParams"
          }
        },
        "required": ["method", "params"]
      },
      "SignTransactionParams": {
        "type": "object",
        "description": "Parameters for signTransaction method",
        "properties": {
          "transaction": {
            "type": "string",
            "description": "Base64 encoded serialized transaction to sign",
            "example": "AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAEDRpb0mdmKftapwzzqUtlcDnuWbw8vwlyiyuWyyieQFKESezu52HWNss0SAcb60ftz7DSpgTwUmfUSl1CYHJ91GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAScgJ7J0AXFr1azCEvB1Y5zpiF4eXR+yTW0UB7am+E/MBAgIAAQwCAAAAQEIPAAAAAAA="
          },
          "encoding": {
            "type": "string",
            "enum": ["base64"],
            "description": "Transaction encoding",
            "example": "base64"
          }
        },
        "required": ["transaction", "encoding"]
      },
      "SignTransactionRequest": {
        "type": "object",
        "description": "Request for signTransaction method",
        "properties": {
          "method": {
            "type": "string",
            "enum": ["signTransaction"],
            "description": "RPC method for signing Solana transactions",
            "example": "signTransaction"
          },
          "params": {
            "$ref": "#/components/schemas/SignTransactionParams"
          }
        },
        "required": ["method", "params"]
      },
      "SignAndSendTransactionParams": {
        "type": "object",
        "description": "Parameters for signAndSendTransaction method",
        "properties": {
          "transaction": {
            "type": "string",
            "description": "Base64 encoded serialized transaction to sign and send",
            "example": "AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAEDRpb0mdmKftapwzzqUtlcDnuWbw8vwlyiyuWyyieQFKESezu52HWNss0SAcb60ftz7DSpgTwUmfUSl1CYHJ91GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAScgJ7J0AXFr1azCEvB1Y5zpiF4eXR+yTW0UB7am+E/MBAgIAAQwCAAAAQEIPAAAAAAA="
          },
          "encoding": {
            "type": "string",
            "enum": ["base64"],
            "description": "Transaction encoding",
            "example": "base64"
          }
        },
        "required": ["transaction", "encoding"]
      },
      "SignAndSendTransactionRequest": {
        "type": "object",
        "description": "Request for signAndSendTransaction method",
        "properties": {
          "method": {
            "type": "string",
            "enum": ["signAndSendTransaction"],
            "description": "RPC method for signing and sending Solana transactions",
            "example": "signAndSendTransaction"
          },
          "caip2": {
            "type": "string",
            "description": "Chain identifier in CAIP-2 format",
            "example": "solana:EtWTRABZaYq6iMfeYKouRu166VU2xqa1"
          },
          "params": {
            "$ref": "#/components/schemas/SignAndSendTransactionParams"
          }
        },
        "required": ["method", "caip2", "params"]
      },
      "RawSignParams": {
        "type": "object",
        "description": "Parameters for raw_sign method",
        "properties": {
          "hash": {
            "type": "string",
            "description": "Raw hash to sign",
            "example": "0x0775aeed9c9ce6e0fbc4db25c5e4e6368029651c905c286f813126a09025a21e"
          }
        },
        "required": ["hash"]
      },
      "RawSignRequest": {
        "type": "object",
        "description": "Request for raw_sign method",
        "properties": {
          "method": {
            "type": "string",
            "enum": ["raw_sign"],
            "description": "RPC method for signing raw hash using wallet's private key",
            "example": "raw_sign"
          },
          "params": {
            "$ref": "#/components/schemas/RawSignParams"
          }
        },
        "required": ["method", "params"]
      },
      "ActionType": {
        "type": "string",
        "description": "Type of wallet action to perform",
        "enum": ["Send", "Call"],
        "example": "Send"
      },
      "Payload": {
        "type": "object",
        "description": "Payload data for wallet operations",
        "properties": {
          "reciever": {
            "type": "string",
            "description": "Recipient address",
            "example": "tb1qz0pnh98kfynptg9dtkj06f7sqnlxl3dxnmnjw4"
          },
          "amount": {
            "type": "string",
            "description": "Amount to send",
            "example": "10000"
          },
          "token_id": {
            "type": "string",
            "description": "Token ID (needed for SUI and Starknet)",
            "example": "0x1234567890abcdef"
          }
        },
        "required": ["reciever", "amount"]
      },
      "ERC20Payload": {
        "type": "object",
        "description": "Payload data for ERC-20 contract calls on EVM and Starknet",
        "properties": {
          "type": {
            "type": "string",
            "description": "Contract type identifier",
            "enum": ["ERC20"],
            "example": "ERC20"
          },
          "address": {
            "type": "string",
            "description": "Contract address for the ERC-20 token",
            "example": "0xE918A5a47b8e0AFAC2382bC5D1e981613e63fB07"
          },
          "method": {
            "type": "string",
            "description": "ERC-20 method name to call",
            "enum": [
              "balanceOf",
              "totalSupply",
              "name",
              "symbol",
              "decimals",
              "allowance",
              "transfer",
              "approve",
              "transferFrom",
              "increaseAllowance",
              "decreaseAllowance",
              "increase_allowance",
              "decrease_allowance"
            ],
            "example": "balanceOf"
          },
          "params": {
            "type": "array",
            "description": "Array of parameters for the contract method. Parameter format depends on the method being called.",
            "items": {
              "type": "string"
            },
            "example": ["0xc2301b62ff12DfBC708894B1d20FAfE31Cc6Cb0a"]
          }
        },
        "required": ["type", "address", "method", "params"]
      },
      "WalletRPCRequest": {
        "type": "object",
        "description": "Wallet RPC request for performing various blockchain operations including transfers and contract calls",
        "properties": {
          "chain_type": {
            "type": "string",
            "description": "Blockchain type",
            "enum": ["BITCOIN", "EVM", "SOLANA", "STARKNET", "SUI"],
            "example": "EVM"
          },
          "chain_id": {
            "type": "string",
            "description": "Chain ID for the blockchain network. Required for EVM chains (e.g., '1' for Ethereum mainnet, '11155111' for Sepolia testnet). For Starknet, use decimal chain IDs (e.g., '879618411357393635146340312313736732060953630524' for mainnet, '21280703052830640944970871415780893550344133951' for testnet).",
            "example": "11155111"
          },
          "type": {
            "$ref": "#/components/schemas/ActionType"
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Payload"
              },
              {
                "$ref": "#/components/schemas/ERC20Payload"
              }
            ],
            "description": "Payload data that varies based on the action type"
          }
        },
        "required": ["chain_type", "chain_id", "type", "data"]
      },
      "PersonalSignResponse": {
        "type": "object",
        "description": "Response for personal_sign method",
        "properties": {
          "method": {
            "type": "string",
            "enum": ["personal_sign"],
            "description": "RPC method that was executed",
            "example": "personal_sign"
          },
          "data": {
            "type": "object",
            "properties": {
              "signature": {
                "type": "string",
                "description": "Hex signature of the signed message",
                "example": "0x292d67e9c5178447f1c5344b3122997dfba8f00e43102d0b746301e9b4afbbf67d952bf870878d92b8eb066da205840458c0a5fb3f53253dbe1adf9c143678311c"
              },
              "encoding": {
                "type": "string",
                "enum": ["utf-8", "hex"],
                "description": "Signature encoding format",
                "example": "hex"
              }
            },
            "required": ["signature", "encoding"]
          }
        },
        "required": ["method", "data"]
      },
      "EthSendTransactionResponse": {
        "type": "object",
        "description": "Response for eth_sendTransaction method",
        "properties": {
          "method": {
            "type": "string",
            "enum": ["eth_sendTransaction"],
            "description": "RPC method that was executed",
            "example": "eth_sendTransaction"
          },
          "data": {
            "type": "object",
            "properties": {
              "hash": {
                "type": "string",
                "description": "Transaction hash",
                "example": "0xfc3a736ab2e34e13be2b0b11b39dbc0232a2e755a11aa5a9219890d3b2c6c7d8"
              },
              "caip2": {
                "type": "string",
                "description": "Chain identifier in CAIP-2 format",
                "example": "eip155:11155111"
              },
              "transaction_id": {
                "type": "string",
                "description": "Internal transaction ID",
                "example": "y90vpg3bnkjxhw541c2zc6a9"
              }
            },
            "required": ["hash", "caip2", "transaction_id"]
          }
        },
        "required": ["method", "data"]
      },
      "EthSignTransactionResponse": {
        "type": "object",
        "description": "Response for eth_signTransaction method",
        "properties": {
          "method": {
            "type": "string",
            "enum": ["eth_signTransaction"],
            "description": "RPC method that was executed",
            "example": "eth_signTransaction"
          },
          "data": {
            "type": "object",
            "properties": {
              "signed_transaction": {
                "type": "string",
                "description": "Signed transaction in RLP format",
                "example": "0x02f870830138de80830f4240830f437480940b81418147df37155d643b5cb65ba6c8cb7aba76872000000000000480c080a05c11a2166ec56189d993dec477477d962ce0d4c466ab7ed8982110621ec87a57a003c796590c0c62eac30acd412f2aa0e8ad740c4ded86fb64d3326ee4c0ea804c"
              },
              "encoding": {
                "type": "string",
                "enum": ["rlp"],
                "description": "Transaction encoding format",
                "example": "rlp"
              }
            },
            "required": ["signed_transaction", "encoding"]
          }
        },
        "required": ["method", "data"]
      },
      "EthSignTypedDataResponse": {
        "type": "object",
        "description": "Response for eth_signTypedData_v4 method",
        "properties": {
          "method": {
            "type": "string",
            "enum": ["eth_signTypedData_v4"],
            "description": "RPC method that was executed",
            "example": "eth_signTypedData_v4"
          },
          "data": {
            "type": "object",
            "properties": {
              "signature": {
                "type": "string",
                "description": "Hex signature of the typed data",
                "example": "0x..."
              },
              "encoding": {
                "type": "string",
                "enum": ["hex"],
                "description": "Signature encoding format",
                "example": "hex"
              }
            },
            "required": ["signature", "encoding"]
          }
        },
        "required": ["method", "data"]
      },
      "EthSign7702AuthorizationResponse": {
        "type": "object",
        "description": "Response for eth_sign7702Authorization method",
        "properties": {
          "method": {
            "type": "string",
            "enum": ["eth_sign7702Authorization"],
            "description": "RPC method that was executed",
            "example": "eth_sign7702Authorization"
          },
          "data": {
            "type": "object",
            "properties": {
              "signature": {
                "type": "string",
                "description": "Hex signature of the 7702 authorization",
                "example": "0x..."
              },
              "encoding": {
                "type": "string",
                "enum": ["hex"],
                "description": "Signature encoding format",
                "example": "hex"
              }
            },
            "required": ["signature", "encoding"]
          }
        },
        "required": ["method", "data"]
      },
      "Secp256k1SignResponse": {
        "type": "object",
        "description": "Response for secp256k1_sign method",
        "properties": {
          "method": {
            "type": "string",
            "enum": ["secp256k1_sign"],
            "description": "RPC method that was executed",
            "example": "secp256k1_sign"
          },
          "data": {
            "type": "object",
            "properties": {
              "signature": {
                "type": "string",
                "description": "Hex signature using secp256k1",
                "example": "0x..."
              },
              "encoding": {
                "type": "string",
                "enum": ["hex"],
                "description": "Signature encoding format",
                "example": "hex"
              }
            },
            "required": ["signature", "encoding"]
          }
        },
        "required": ["method", "data"]
      },
      "SignMessageResponse": {
        "type": "object",
        "description": "Response for signMessage method",
        "properties": {
          "method": {
            "type": "string",
            "enum": ["signMessage"],
            "description": "RPC method that was executed",
            "example": "signMessage"
          },
          "data": {
            "type": "object",
            "properties": {
              "signature": {
                "type": "string",
                "description": "Base64 signature of the signed message",
                "example": "76wpEsq9FS4QOInePQUY3b4GCXdVwLv+nNp4NnI+EPTAPVwvXCjzjUW/gD6Vuh4KaD+7p2X4MaTu6xYu0rMTAA=="
              },
              "encoding": {
                "type": "string",
                "enum": ["base64"],
                "description": "Signature encoding format",
                "example": "base64"
              }
            },
            "required": ["signature", "encoding"]
          }
        },
        "required": ["method", "data"]
      },
      "SignTransactionResponse": {
        "type": "object",
        "description": "Response for signTransaction method",
        "properties": {
          "method": {
            "type": "string",
            "enum": ["signTransaction"],
            "description": "RPC method that was executed",
            "example": "signTransaction"
          },
          "data": {
            "type": "object",
            "properties": {
              "signed_transaction": {
                "type": "string",
                "description": "Base64 encoded signed transaction",
                "example": "AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAEDRpb0mdmKftapwzzqUtlcDnuWbw8vwlyiyuWyyieQFKESezu52HWNss0SAcb60ftz7DSpgTwUmfUSl1CYHJ91GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAScgJ7J0AXFr1azCEvB1Y5zpiF4eXR"
              },
              "encoding": {
                "type": "string",
                "enum": ["base64"],
                "description": "Transaction encoding format",
                "example": "base64"
              }
            },
            "required": ["signed_transaction", "encoding"]
          }
        },
        "required": ["method", "data"]
      },
      "SignAndSendTransactionResponse": {
        "type": "object",
        "description": "Response for signAndSendTransaction method",
        "properties": {
          "method": {
            "type": "string",
            "enum": ["signAndSendTransaction"],
            "description": "RPC method that was executed",
            "example": "signAndSendTransaction"
          },
          "data": {
            "type": "object",
            "properties": {
              "hash": {
                "type": "string",
                "description": "Transaction hash",
                "example": "22VS6wqrbeaN21ku3pjEjfnrWgk1deiFBSB1kZzS8ivr2G8wYmpdnV3W7oxpjFPGkt5bhvZvK1QBzuCfUPUYYFQq"
              },
              "caip2": {
                "type": "string",
                "description": "Chain identifier in CAIP-2 format",
                "example": "solana:EtWTRABZaYq6iMfeYKouRu166VU2xqa1"
              },
              "transaction_id": {
                "type": "string",
                "description": "Internal transaction ID",
                "example": "nyorsf87s9d08jimesv3n8yq"
              }
            },
            "required": ["hash", "caip2", "transaction_id"]
          }
        },
        "required": ["method", "data"]
      },
      "RawSignResponse": {
        "type": "object",
        "description": "Response for raw_sign method",
        "properties": {
          "method": {
            "type": "string",
            "enum": ["raw_sign"],
            "description": "RPC method that was executed",
            "example": "raw_sign"
          },
          "data": {
            "type": "object",
            "properties": {
              "signature": {
                "type": "string",
                "description": "Hex signature of the raw hash",
                "example": "0x292d67e9c5178447f1c5344b3122997dfba8f00e43102d0b746301e9b4afbbf67d952bf870878d92b8eb066da205840458c0a5fb3f53253dbe1adf9c143678311c"
              },
              "encoding": {
                "type": "string",
                "enum": ["hex"],
                "description": "Signature encoding format",
                "example": "hex"
              }
            },
            "required": ["signature", "encoding"]
          }
        },
        "required": ["method", "data"]
      },
      "WalletRPCResponse": {
        "type": "object",
        "description": "Wallet RPC response with different result types based on the operation performed",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the operation was successful",
            "example": true
          },
          "result": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransactionResult"
              },
              {
                "$ref": "#/components/schemas/ViewCallResult"
              },
              {
                "$ref": "#/components/schemas/StarknetViewCallResult"
              }
            ],
            "description": "Result data that varies based on the operation type"
          }
        },
        "required": ["success", "result"]
      },
      "TransactionResult": {
        "type": "object",
        "description": "Result for state-changing operations that return a transaction ID",
        "properties": {
          "Transaction": {
            "type": "object",
            "properties": {
              "tx_id": {
                "type": "string",
                "description": "Transaction ID or hash",
                "example": "0x68d7ff1c5ec2bc2f34114ed0229776442b27ba2e24cb410034a8ad9679d6b894"
              }
            },
            "required": ["tx_id"]
          }
        },
        "required": ["Transaction"]
      },
      "ViewCallResult": {
        "type": "object",
        "description": "Result for EVM view calls that return both hex and parsed data",
        "properties": {
          "ViewCall": {
            "type": "object",
            "properties": {
              "hex": {
                "type": "string",
                "description": "Raw hex response from the contract call",
                "example": "0x00000000000000000000000000000000000000000000000000000000000186a1"
              },
              "parsed": {
                "description": "Human-readable parsed value from the hex response",
                "oneOf": [
                  {
                    "type": "string",
                    "description": "Parsed string value (for numbers, addresses, or text)",
                    "example": "100001"
                  },
                  {
                    "type": "boolean",
                    "description": "Parsed boolean value",
                    "example": true
                  }
                ]
              }
            },
            "required": ["hex", "parsed"]
          }
        },
        "required": ["ViewCall"]
      },
      "StarknetViewCallResult": {
        "type": "object",
        "description": "Result for Starknet view calls that return direct data",
        "properties": {
          "StarknetViewCall": {
            "type": "object",
            "properties": {
              "data": {
                "type": "string",
                "description": "Direct data response from Starknet contract call",
                "example": "9986730879959026111"
              }
            },
            "required": ["data"]
          }
        },
        "required": ["StarknetViewCall"]
      },
      "WalletRPCRateLimitResponse": {
        "type": "object",
        "description": "Rate limit response for wallet RPC operations",
        "properties": {
          "error": {
            "type": "string",
            "example": "Too many RPC requests. Please try again later."
          },
          "retry_after": {
            "type": "integer",
            "description": "Number of seconds to wait before retrying",
            "example": 60
          }
        }
      },
      "QuorumsResponse": {
        "type": "object",
        "description": "Response containing an array of quorums",
        "properties": {
          "quorums": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Quorum"
            }
          }
        }
      },
      "QuorumNotFoundResponse": {
        "type": "object",
        "description": "Response when quorum is not found",
        "properties": {
          "error": {
            "type": "string",
            "example": "Key quorum not found"
          }
        }
      },
      "AppNotFoundResponse": {
        "type": "object",
        "description": "Response when app is not found",
        "properties": {
          "error": {
            "type": "string",
            "example": "App not found"
          }
        }
      },
      "DeleteSuccessResponse": {
        "type": "object",
        "description": "Generic success response for delete operations",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "PolicyNotFoundResponse": {
        "type": "object",
        "description": "Response when policy is not found",
        "properties": {
          "error": {
            "type": "string",
            "example": "Policy not found"
          }
        }
      },
      "PolicyRuleNotFoundResponse": {
        "type": "object",
        "description": "Response when policy rule is not found",
        "properties": {
          "error": {
            "type": "string",
            "example": "Policy or rule not found"
          }
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "BasicAuth": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}
